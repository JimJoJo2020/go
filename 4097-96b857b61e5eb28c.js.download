"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[4097],{14097:function(n,e,t){t.d(e,{YqY:function(){return nb},PQu:function(){return nD},DGp:function(){return nA},Rfk:function(){return nU},emG:function(){return nE},Rjq:function(){return nL},MOr:function(){return nO},uzS:function(){return nz},uxw:function(){return nk},E0U:function(){return nT},Thd:function(){return nK},nUr:function(){return nV},Kfh:function(){return nq},deq:function(){return nG},wLv:function(){return nw},fDh:function(){return nx},raN:function(){return nJ},q8i:function(){return nX},m5f:function(){return nj},Yg6:function(){return nZ},mtA:function(){return n0},TIP:function(){return n2},P0n:function(){return n5},MBW:function(){return n9},dL4:function(){return n3},aUP:function(){return n6},B2r:function(){return n8},wU$:function(){return ee},sqZ:function(){return eo},g5d:function(){return er},erQ:function(){return ea},eAS:function(){return eu},VNP:function(){return ed},Q2A:function(){return em},bp3:function(){return eg},oJm:function(){return ey},lvR:function(){return ef},Do8:function(){return eS},OEn:function(){return eh},CRw:function(){return e_},KWf:function(){return eC},zl0:function(){return eb},YzL:function(){return eD},VGB:function(){return ev},PDB:function(){return eA},i9$:function(){return eU},w74:function(){return t_},IFn:function(){return tb},RpT:function(){return o8},z_p:function(){return tv},bpc:function(){return tU},h$e:function(){return tE},oCe:function(){return tO},xtv:function(){return tk},qS8:function(){return tP},eQJ:function(){return ae},DSY:function(){return ai},JX6:function(){return tF},ppc:function(){return ao},Ttj:function(){return au},HwZ:function(){return as},PdH:function(){return al},U5C:function(){return ap},HKM:function(){return ay},Tx4:function(){return aS},EY7:function(){return a$},PDt:function(){return ab},cIN:function(){return av},xlw:function(){return tK},YxF:function(){return tq},t3_:function(){return aE},lLb:function(){return oS},XgB:function(){return tB},m7v:function(){return rS},HC5:function(){return tx},Mhz:function(){return tW},l3B:function(){return tJ},BZw:function(){return tj},wev:function(){return tZ},RsV:function(){return t2},Nw3:function(){return ak},$1r:function(){return aO},tBq:function(){return aP},n6Z:function(){return aF},vIi:function(){return t9},wRX:function(){return t1},ONU:function(){return t8},$Uu:function(){return t4},bXB:function(){return it},Yge:function(){return ir},N4w:function(){return ia},EYN:function(){return id},uap:function(){return ic},SZT:function(){return im},tB:function(){return ig},fzH:function(){return iS},qct:function(){return i$},vzw:function(){return i_},b81:function(){return ib},R1$:function(){return iv},KJz:function(){return iU},q0l:function(){return iE},Nii:function(){return aK},FrL:function(){return aq},f5F:function(){return aB},E2g:function(){return aJ},aYj:function(){return iO},tC5:function(){return ik},$QT:function(){return iP},zdH:function(){return iF},ORn:function(){return iK},bXU:function(){return iq},W53:function(){return iB},yiR:function(){return ix},$hG:function(){return iW},_YP:function(){return iJ},fOM:function(){return ij},zLg:function(){return iZ},K12:function(){return i2},a7T:function(){return i9},IDW:function(){return aj},OEy:function(){return aZ},uh3:function(){return a2},l3F:function(){return a9},Ma6:function(){return a4},sCo:function(){return a1},YH6:function(){return a8},ZS4:function(){return uu},gOq:function(){return ue},VVW:function(){return ui},ALt:function(){return uo},hO8:function(){return us},IVG:function(){return i1},qe:function(){return i4},MKd:function(){return r$},Y58:function(){return i8},iuq:function(){return ul},pNt:function(){return up},fwe:function(){return re},Bjj:function(){return ri},yJ:function(){return ro},un2:function(){return ru},r1z:function(){return rs},Mdw:function(){return aW},MH0:function(){return uy},i3X:function(){return rl},s$$:function(){return uS},VZT:function(){return rp},Ytt:function(){return ry},dO7:function(){return u$},lUB:function(){return ub},f4J:function(){return uv},F$s:function(){return u2},z4U:function(){return uU},Zas:function(){return uE},E7N:function(){return uO},FUX:function(){return uk},TkW:function(){return uF},MJY:function(){return uP},tly:function(){return uK},J6L:function(){return uq},zY2:function(){return uB},FeP:function(){return ux},pBS:function(){return uJ},cWU:function(){return r_},BpQ:function(){return rb},qyK:function(){return rv},rfP:function(){return rU},ll7:function(){return uj},cnY:function(){return uZ},ibt:function(){return rE},pYZ:function(){return rO},IX4:function(){return rk},ZtH:function(){return rP},xw1:function(){return rF},avu:function(){return rK},ev6:function(){return u9},jtF:function(){return u1},xLk:function(){return u4},Mmz:function(){return rq},Ujo:function(){return rB},xhU:function(){return rx},OcZ:function(){return rW},MTo:function(){return rJ},KSL:function(){return rj},y_H:function(){return rZ},IoK:function(){return r2},NN8:function(){return u8},Zcr:function(){return r9},JoT:function(){return de},r4m:function(){return di},Cqb:function(){return da},azX:function(){return dd},z7O:function(){return dc},JvW:function(){return dm},URI:function(){return dg},qub:function(){return r1},_OW:function(){return r4},Bao:function(){return r8},J9x:function(){return oe},oKg:function(){return oi},l4r:function(){return oo},xCA:function(){return ou},Z6k:function(){return os},MAZ:function(){return ol},Wcf:function(){return op},SPR:function(){return oy},gU7:function(){return o$},iCV:function(){return o_},EPq:function(){return ob},$fk:function(){return oU},TsE:function(){return ov},gTf:function(){return oE},wnl:function(){return oO},gKG:function(){return ok},nGK:function(){return ox},ty1:function(){return oP},S1N:function(){return oF},F8D:function(){return oK},B3J:function(){return oq},fJm:function(){return oB},LhF:function(){return oW},NNc:function(){return oJ},gAB:function(){return oj},yek:function(){return aU},coe:function(){return df},TBQ:function(){return dh},Ktf:function(){return dI},e2W:function(){return dC},ciU:function(){return dD},FRE:function(){return dA},W0C:function(){return dT},B2q:function(){return dR},Vi7:function(){return dN},krJ:function(){return dV},KSm:function(){return oZ},EDY:function(){return o9},qcf:function(){return o2},ilN:function(){return o1},HOn:function(){return dG},OQm:function(){return dw},NV2:function(){return dH},AQC:function(){return dQ},qA7:function(){return dX},u1m:function(){return dY}});var i,r,o,a,u,d,s,c,l,m,p,g,y,f,S,h,$,I,_,C,b,D,v,A,U,M,E,L,O,z,k,R,P,T,F,N,K,V,q,G,B,w,x,Q,W,H,J,X,j,Y,Z,nn,ne,nt,ni,nr,no,na,nu,nd,ns,nc,nl,nm,np,ng,ny,nf,nS,nh,n$,nI,n_,nC,nb,nD,nv,nA,nU,nM,nE,nL,nO,nz,nk,nR,nP,nT,nF,nN,nK,nV,nq,nG,nB,nw,nx,nQ,nW,nH,nJ,nX,nj,nY,nZ,n0,n2,n5,n9,n3,n1,n7,n4,n6,n8,en,ee,et,ei,er,eo,ea,eu,ed,es,ec,el,em,ep,eg,ey,ef,eS,eh,e$,eI,e_,eC,eb,eD,ev,eA,eU,eM,eE,eL,eO,ez=t(38975),ek=t(71864),eR=t(54646),eP=t(66722),eT=t(27084),eF=t(57023);let eN=new eR.GraphQLClient("".concat(eT.T,"/graphql"),{credentials:"include",headers(){let{csrfToken:n}=function(){let n=eF.ZP.get();return Object.keys(n).length>0?{csrfToken:n._csrf||""}:{csrfToken:""}}();return{"x-csrf-token":n}}}),eK=(n,e,t)=>async()=>eN.request((0,eP.Ps)(n),e,t);(n_||(n_={})).FirstApiCall="FirstApiCall",(i=nC||(nC={})).Error="Error",i.Pending="Pending",i.Ready="Ready",(r=nb||(nb={})).Active="Active",r.Inactive="Inactive",(o=nD||(nD={})).Datadog="Datadog",o.GenericHttps="GenericHttps",o.GoogleCloudStorage="GoogleCloudStorage",o.S3="S3",o.Splunk="Splunk",(a=nv||(nv={})).Addresses="Addresses",a.CostCenterName="CostCenterName",a.DepartmentName="DepartmentName",a.DivisionName="DivisionName",a.EmployeeType="EmployeeType",a.EmploymentStartDate="EmploymentStartDate",a.ManagerEmail="ManagerEmail",(u=nA||(nA={})).Failed="Failed",u.Paid="Paid",u.Pending="Pending",(d=nU||(nU={})).PenTest="PenTest",d.SecurityQuestionnaire="SecurityQuestionnaire",d.Soc2="Soc2",d.Soc3="Soc3",(s=nM||(nM={})).AcsUrlNotFound="AcsUrlNotFound",s.DecryptionFailed="DecryptionFailed",s.DecryptionMalformedEncryptedAssertion="DecryptionMalformedEncryptedAssertion",s.DecryptionMissingEncryptionKey="DecryptionMissingEncryptionKey",s.IdTokenInvalid="IdTokenInvalid",s.IdpIdInvalid="IdpIdInvalid",s.IdpInitiatedExpiredResponse="IdpInitiatedExpiredResponse",s.IdpInitiatedWithInResponseTo="IdpInitiatedWithInResponseTo",s.IdpStatusCodeAuthenticationFailed="IdpStatusCodeAuthenticationFailed",s.IdpStatusCodeInvalidNameIdPolicy="IdpStatusCodeInvalidNameIdPolicy",s.IdpStatusCodeNotSuccessful="IdpStatusCodeNotSuccessful",s.IdpStatusCodeRequestDenied="IdpStatusCodeRequestDenied",s.InvalidAssertion="InvalidAssertion",s.InvalidAttributes="InvalidAttributes",s.InvalidIssueInstantAssertion="InvalidIssueInstantAssertion",s.InvalidRelayState="InvalidRelayState",s.InvalidSamlSchema="InvalidSamlSchema",s.InvalidSamlSignature="InvalidSamlSignature",s.InvalidX509Cert="InvalidX509Cert",s.MalformedSamlResponse="MalformedSamlResponse",s.MissingSamlEntityId="MissingSamlEntityId",s.MissingSamlIdpUrl="MissingSamlIdpUrl",s.MissingSamlRelyingPartyPrivateKey="MissingSamlRelyingPartyPrivateKey",s.OidcFailed="OidcFailed",s.ProfileNotAllowedOutsideOrganization="ProfileNotAllowedOutsideOrganization",s.ResponseReplayed="ResponseReplayed",s.SamlAssertionMissingSignatures="SamlAssertionMissingSignatures",s.SamlResponseMissingAssertion="SamlResponseMissingAssertion",s.WorkOsAuthorizationCodeAlreadyExchanged="WorkOsAuthorizationCodeAlreadyExchanged",s.WorkOsAuthorizationCodeExpired="WorkOsAuthorizationCodeExpired",(c=nE||(nE={})).Active="Active",c.Deleting="Deleting",c.Inactive="Inactive",c.Validating="Validating",(l=nL||(nL={})).Adfssaml="ADFSSAML",l.AdpOidc="AdpOidc",l.Auth0Migration="Auth0Migration",l.Auth0Saml="Auth0SAML",l.AzureSaml="AzureSAML",l.CasSaml="CasSAML",l.ClassLinkSaml="ClassLinkSAML",l.CloudflareSaml="CloudflareSAML",l.CyberArkSaml="CyberArkSAML",l.DuoSaml="DuoSAML",l.GenericOidc="GenericOIDC",l.GenericSaml="GenericSAML",l.GithubOAuth="GithubOAuth",l.GoogleOAuth="GoogleOAuth",l.GoogleSaml="GoogleSAML",l.JumpCloudSaml="JumpCloudSAML",l.KeycloakSaml="KeycloakSAML",l.LastPassSaml="LastPassSAML",l.LoginGovOidc="LoginGovOidc",l.MagicLink="MagicLink",l.MicrosoftOAuth="MicrosoftOAuth",l.MiniOrangeSaml="MiniOrangeSAML",l.NetIqSaml="NetIqSAML",l.OktaSaml="OktaSAML",l.OneLoginSaml="OneLoginSAML",l.OracleSaml="OracleSAML",l.PingFederateSaml="PingFederateSAML",l.PingOneSaml="PingOneSAML",l.RipplingSaml="RipplingSAML",l.SalesforceSaml="SalesforceSAML",l.ShibbolethGenericSaml="ShibbolethGenericSAML",l.ShibbolethSaml="ShibbolethSAML",l.SimpleSamlPhpSaml="SimpleSamlPhpSAML",l.TestIdp="TestIdp",l.VMwareSaml="VMwareSAML",(m=nO||(nO={})).AwaitingVerification="AwaitingVerification",m.VerificationFailed="VerificationFailed",m.Verified="Verified",(p=nz||(nz={})).AdminPortal="AdminPortal",p.AuthApi="AuthAPI",p.HostedAuthkit="HostedAuthkit",(g=nk||(nk={})).AllowList="AllowList",g.SyncAll="SyncAll",(y=nR||(nR={})).AutoMapped="AutoMapped",y.CustomMapped="CustomMapped",(f=nP||(nP={})).InvalidAttributeMapping="InvalidAttributeMapping",f.InvalidCredentials="InvalidCredentials",f.MalformedOptionalReport="MalformedOptionalReport",f.MalformedRequiredReport="MalformedRequiredReport",f.MissingRequiredAttribute="MissingRequiredAttribute",f.RequiredReportNotFound="RequiredReportNotFound",f.UnableToCreateEntityDefinition="UnableToCreateEntityDefinition",(S=nT||(nT={})).Deleting="Deleting",S.InvalidCredentials="InvalidCredentials",S.Linked="Linked",S.Unlinked="Unlinked",S.Validating="Validating",(h=nF||(nF={})).MalformedDirectoryGroup="MalformedDirectoryGroup",h.MalformedDirectoryUser="MalformedDirectoryUser",($=nN||(nN={})).Completed="Completed",$.Error="Error",$.Running="Running",(I=nK||(nK={})).AzureScimv2_0="AzureSCIMV2_0",I.BambooHr="BambooHR",I.BreatheHr="BreatheHr",I.CezanneHr="CezanneHr",I.CyberArkScimV2_0="CyberArkScimV2_0",I.FourthHr="FourthHr",I.GenericScimv2_0="GenericSCIMV2_0",I.GoogleWorkspace="GoogleWorkspace",I.Gusto="Gusto",I.Hibob="Hibob",I.JumpCloudScimV2_0="JumpCloudScimV2_0",I.OktaScimv2_0="OktaSCIMV2_0",I.OneLoginScimV2_0="OneLoginScimV2_0",I.PeopleHr="PeopleHr",I.Personio="Personio",I.PingFederateScimV2_0="PingFederateScimV2_0",I.Rippling="Rippling",I.RipplingScimV2_0="RipplingScimV2_0",I.S3="S3",I.Sftp="Sftp",I.SftpWorkday="SftpWorkday",I.Workday="Workday",(_=nV||(nV={})).Active="Active",_.Inactive="Inactive",_.Suspended="Suspended",_.Validating="Validating",(C=nq||(nq={})).Connection="Connection",C.Error="Error",(b=nG||(nG={})).Subscribed="Subscribed",b.Unsubscribed="Unsubscribed",(D=nB||(nB={})).Production="Production",D.Sandbox="Sandbox",(v=nw||(nw={})).AuditLogs="AuditLogs",v.DSync="DSync",v.LogStreams="LogStreams",v.Sso="SSO",(A=nx||(nx={})).Json="JSON",A.Ndjson="NDJSON",(U=nQ||(nQ={})).Tiered="Tiered",U.Unit="Unit",(M=nW||(nW={})).Active="Active",M.All="All",M.RecentlyExpired="RecentlyExpired",(nH||(nH={})).Secret="SECRET",(E=nJ||(nJ={})).Contain="Contain",E.Cover="Cover",(L=nX||(nX={})).Icon="Icon",L.Logo="Logo",(O=nj||(nj={})).Invalid="Invalid",O.Valid="Valid",(z=nY||(nY={})).Authorized="Authorized",z.Failed="Failed",z.Started="Started",z.Successful="Successful",(k=nZ||(nZ={})).Error="Error",k.Warning="Warning",(R=n0||(n0={})).Authorized="Authorized",R.Failed="Failed",R.Started="Started",R.Successful="Successful",R.Terminated="Terminated",(P=n2||(n2={})).AuditLogs="AuditLogs",P.Dsync="Dsync",P.Sso="SSO",P.UserManagement="UserManagement",P.UserManagementImpersonation="UserManagementImpersonation",P.UserManagementProd="UserManagementProd",(T=n5||(n5={})).Active="Active",T.AwaitingSetup="AwaitingSetup",T.Deleting="Deleting",T.Inactive="Inactive",T.SetupInProgress="SetupInProgress",T.Validating="Validating",(F=n9||(n9={})).AwaitingSetup="AwaitingSetup",F.Deleting="Deleting",F.InvalidCredentials="InvalidCredentials",F.Linked="Linked",F.SetupInProgress="SetupInProgress",F.Unlinked="Unlinked",F.Validating="Validating",(N=n3||(n3={})).Lowercase="Lowercase",N.Number="Number",N.Symbol="Symbol",N.Uppercase="Uppercase",(K=n1||(n1={})).Delivered="Delivered",K.Expired="Expired",K.New="New",K.Pending="Pending",K.Verified="Verified",(V=n7||(n7={})).Exchanged="Exchanged",V.Pending="Pending",(q=n4||(n4={})).Created="Created",q.Deleted="Deleted",q.EmailSent="EmailSent",(G=n6||(n6={})).DomainVerification="DomainVerification",G.Dsync="Dsync",G.LogStreams="LogStreams",G.Sso="Sso",(B=n8||(n8={})).Active="Active",B.Inactive="Inactive",(w=en||(en={})).Invalid="Invalid",w.Valid="Valid",(x=ee||(ee={})).Full="Full",x.Large="Large",x.Medium="Medium",x.None="None",x.Small="Small",(Q=et||(et={})).Active="Active",Q.Deleting="Deleting",(W=ei||(ei={})).Binary="Binary",W.Bmp="Bmp",W.Gif="Gif",W.Jpeg="Jpeg",W.Png="Png",W.Svg="Svg",W.Tiff="Tiff",(H=er||(er={})).Authorized="Authorized",H.Failed="Failed",H.Started="Started",H.Successful="Successful",(J=eo||(eo={})).AdminPortalTest="AdminPortalTest",J.IdentityProvider="IdentityProvider",J.ServiceProvider="ServiceProvider",(X=ea||(ea={})).ExpiredCertificate="ExpiredCertificate",X.MalformedCertificate="MalformedCertificate",(j=eu||(eu={})).GithubOAuth="GithubOAuth",j.GoogleOAuth="GoogleOAuth",j.Impersonation="Impersonation",j.MagicAuth="MagicAuth",j.MicrosoftOAuth="MicrosoftOAuth",j.Password="Password",j.SingleSignOn="SingleSignOn",(Y=ed||(ed={})).Generic="Generic",Y.Workday="Workday",(Z=es||(es={})).Ad="AD",Z.Ae="AE",Z.Ar="AR",Z.At="AT",Z.Au="AU",Z.Be="BE",Z.Bg="BG",Z.Bo="BO",Z.Br="BR",Z.Ca="CA",Z.Ch="CH",Z.Cl="CL",Z.Cn="CN",Z.Co="CO",Z.Cr="CR",Z.Cy="CY",Z.Cz="CZ",Z.De="DE",Z.Dk="DK",Z.Do="DO",Z.Ec="EC",Z.Ee="EE",Z.Eg="EG",Z.Es="ES",Z.Eu="EU",Z.Fi="FI",Z.Fr="FR",Z.Gb="GB",Z.Ge="GE",Z.Gr="GR",Z.Hk="HK",Z.Hr="HR",Z.Hu="HU",Z.Id="ID",Z.Ie="IE",Z.Il="IL",Z.In="IN",Z.Is="IS",Z.It="IT",Z.Jp="JP",Z.Ke="KE",Z.Kr="KR",Z.Li="LI",Z.Lt="LT",Z.Lu="LU",Z.Lv="LV",Z.Mt="MT",Z.Mx="MX",Z.My="MY",Z.Nl="NL",Z.No="NO",Z.Nz="NZ",Z.Pe="PE",Z.Ph="PH",Z.Pl="PL",Z.Pt="PT",Z.Ro="RO",Z.Rs="RS",Z.Ru="RU",Z.Sa="SA",Z.Se="SE",Z.Sg="SG",Z.Si="SI",Z.Sk="SK",Z.Sv="SV",Z.Th="TH",Z.Tr="TR",Z.Tw="TW",Z.Ua="UA",Z.Us="US",Z.Uy="UY",Z.Ve="VE",Z.Vn="VN",Z.Za="ZA",(nn=ec||(ec={})).AdNrt="ad_nrt",nn.AeTrn="ae_trn",nn.ArCuit="ar_cuit",nn.AuAbn="au_abn",nn.AuArn="au_arn",nn.BgUic="bg_uic",nn.BoTin="bo_tin",nn.BrCnpj="br_cnpj",nn.BrCpf="br_cpf",nn.CaBn="ca_bn",nn.CaGstHst="ca_gst_hst",nn.CaPstBc="ca_pst_bc",nn.CaPstMb="ca_pst_mb",nn.CaPstSk="ca_pst_sk",nn.CaQst="ca_qst",nn.ChVat="ch_vat",nn.ClTin="cl_tin",nn.CnTin="cn_tin",nn.CoNit="co_nit",nn.CrTin="cr_tin",nn.DoRcn="do_rcn",nn.EcRuc="ec_ruc",nn.EgTin="eg_tin",nn.EsCif="es_cif",nn.EuOssVat="eu_oss_vat",nn.EuVat="eu_vat",nn.GbVat="gb_vat",nn.GeVat="ge_vat",nn.HkBr="hk_br",nn.HuTin="hu_tin",nn.IdNpwp="id_npwp",nn.IlVat="il_vat",nn.InGst="in_gst",nn.IsVat="is_vat",nn.JpCn="jp_cn",nn.JpRn="jp_rn",nn.JpTrn="jp_trn",nn.KePin="ke_pin",nn.KrBrn="kr_brn",nn.LiUid="li_uid",nn.MxRfc="mx_rfc",nn.MyFrp="my_frp",nn.MyItn="my_itn",nn.MySst="my_sst",nn.NoVat="no_vat",nn.NzGst="nz_gst",nn.PeRuc="pe_ruc",nn.PhTin="ph_tin",nn.RoTin="ro_tin",nn.RsPib="rs_pib",nn.RuInn="ru_inn",nn.RuKpp="ru_kpp",nn.SaVat="sa_vat",nn.SgGst="sg_gst",nn.SgUen="sg_uen",nn.SiTin="si_tin",nn.SvNit="sv_nit",nn.ThVat="th_vat",nn.TrTin="tr_tin",nn.TwVat="tw_vat",nn.UaVat="ua_vat",nn.UsEin="us_ein",nn.UyRuc="uy_ruc",nn.VeRif="ve_rif",nn.VnTin="vn_tin",nn.ZaVat="za_vat",(ne=el||(el={})).Active="Active",ne.Inactive="Inactive",ne.Suspended="Suspended",(nt=em||(em={})).Dark="Dark",nt.Light="Light",nt.System="System",(ni=ep||(ep={})).Active="Active",ni.Pending="Pending",(nr=eg||(eg={})).Sms="Sms",nr.Totp="Totp",(no=ey||(ey={})).Ephemeral="Ephemeral",no.Issued="Issued",no.Revoked="Revoked",(na=ef||(ef={})).Off="Off",na.Optional="Optional",na.Required="Required",(eS||(eS={})).Totp="Totp",(nu=eh||(eh={})).Accepted="Accepted",nu.Expired="Expired",nu.Pending="Pending",nu.Revoked="Revoked",(nd=e$||(e$={})).Active="Active",nd.Pending="Pending",(ns=eI||(eI={})).Automatic="Automatic",ns.Manual="Manual",(nc=e_||(e_={})).Managed="Managed",nc.Unmanaged="Unmanaged",(nl=eC||(eC={})).Admin="ADMIN",nl.Member="MEMBER",nl.Support="SUPPORT",(nm=eb||(eb={})).Accepted="ACCEPTED",nm.Invited="INVITED",(np=eD||(eD={})).Active="Active",np.InActive="InActive",(ng=ev||(ev={})).Authentication="Authentication",ng.Connection="Connection",ng.Directory="Directory",ng.DirectoryGroup="DirectoryGroup",ng.DirectoryUser="DirectoryUser",ng.Organization="Organization",ng.OrganizationDomain="OrganizationDomain",ng.OrganizationMembership="OrganizationMembership",ng.Role="Role",ng.Session="Session",ng.User="User",(ny=eA||(eA={})).ConnectionActivated="ConnectionActivated",ny.ConnectionDeactivated="ConnectionDeactivated",ny.ConnectionDeleted="ConnectionDeleted",ny.DirectoryActivated="DirectoryActivated",ny.DirectoryDeactivated="DirectoryDeactivated",ny.DirectoryDeleted="DirectoryDeleted",ny.GroupCreated="GroupCreated",ny.GroupDeleted="GroupDeleted",ny.GroupUpdated="GroupUpdated",ny.OrganizationCreated="OrganizationCreated",ny.OrganizationDeleted="OrganizationDeleted",ny.OrganizationDomainVerificationFailed="OrganizationDomainVerificationFailed",ny.OrganizationDomainVerified="OrganizationDomainVerified",ny.OrganizationMembershipAdded="OrganizationMembershipAdded",ny.OrganizationMembershipCreated="OrganizationMembershipCreated",ny.OrganizationMembershipDeleted="OrganizationMembershipDeleted",ny.OrganizationMembershipRemoved="OrganizationMembershipRemoved",ny.OrganizationMembershipUpdated="OrganizationMembershipUpdated",ny.OrganizationUpdated="OrganizationUpdated",ny.UserAddedToGroup="UserAddedToGroup",ny.UserCreated="UserCreated",ny.UserDeleted="UserDeleted",ny.UserManagementUserCreated="UserManagementUserCreated",ny.UserManagementUserDeleted="UserManagementUserDeleted",ny.UserManagementUserUpdated="UserManagementUserUpdated",ny.UserRemovedFromGroup="UserRemovedFromGroup",ny.UserUpdated="UserUpdated",(nf=eU||(eU={})).Canceled="Canceled",nf.Delivered="Delivered",nf.Failed="Failed",nf.InProgress="InProgress",nf.Scheduled="Scheduled",(nS=eM||(eM={})).Contain="Contain",nS.Cover="Cover",(nh=eE||(eE={})).AuditLogs="AuditLogs",nh.DSync="DSync",nh.DomainVerification="DomainVerification",nh.LogStreams="LogStreams",nh.MigrateSso="MigrateSso",nh.Sso="Sso",(n$=eL||(eL={})).Full="Full",n$.Large="Large",n$.Medium="Medium",n$.None="None",n$.Small="Small",(nI=eO||(eO={})).Dark="Dark",nI.Light="Light",nI.System="System";let eV="\n    fragment AppBranding on AppBranding {\n  id\n  logoIconFit\n  radius\n  theme\n  portalOrigin\n  lightButtonBackgroundColor\n  lightButtonForegroundColor\n  lightFaviconPath\n  lightLinkColor\n  lightLogoIconPath\n  lightLogoPath\n  lightPageBackgroundColor\n  darkButtonBackgroundColor\n  darkButtonForegroundColor\n  darkFaviconPath\n  darkLinkColor\n  darkLogoIconPath\n  darkLogoPath\n  darkPageBackgroundColor\n  authkitLogoStyle\n  authkitSignInHeadingText\n  authkitSignUpLinkText\n}\n    ",eq="\n    fragment AuditLogEvent on AuditLogEvent {\n  id\n  createdAt\n  occurredAt\n  action\n  actor {\n    id\n    name\n    type\n  }\n  targets {\n    type\n  }\n}\n    ",eG="\n    fragment AuditLogStream on AuditLogStream {\n  id\n  state\n  organization {\n    id\n  }\n  type {\n    __typename\n    ... on DatadogLogStream {\n      __typename\n      apiKey\n    }\n    ... on SplunkLogStream {\n      __typename\n      hecToken\n      url\n    }\n    ... on S3LogStream {\n      __typename\n      accountId\n      bucketName\n      bucketPath\n      externalId\n      region\n      roleName\n      workosAccountId\n    }\n    ... on GoogleCloudStorageLogStream {\n      __typename\n      accessKeyId\n      secretAccessKey\n      bucketName\n      bucketPath\n    }\n    ... on GenericHttpsLogStream {\n      __typename\n      url\n      authHeaderName\n      authHeaderValue\n      requestBodyFormat\n    }\n  }\n}\n    ",eB="\n    fragment AuditLogTarget on AuditLogTarget {\n  id\n  target\n}\n    ",ew="\n    fragment AuditLogValidator on AuditLogValidator {\n  id\n  action\n  versions {\n    id\n    version\n    schema\n    targets {\n      id\n      target\n    }\n  }\n}\n    ",ex="\n    fragment Auth0Credential on Auth0Credential {\n  id\n  clientId\n  clientSecret\n  apiDomain\n  connection {\n    id\n    name\n  }\n}\n    ",eQ="\n    fragment TeamMembership on UsersTeam {\n  id\n  role\n  state\n  isManagedByDirectory\n  complianceTermsAcceptedAt\n  user {\n    id\n    name\n    email\n    isMfaConfigured\n  }\n  team {\n    id\n  }\n}\n    ",eW="\n    fragment AuthedUser on User {\n  id\n  firstName\n  lastName\n  name\n  email\n  users_teams {\n    ...TeamMembership\n  }\n}\n    ".concat(eQ),eH="\n    fragment ConnectionSessionError on ConnectionSessionError {\n  __typename\n  ... on MalformedSamlResponseError {\n    code\n    reason\n  }\n  ... on InvalidX509CertError {\n    code\n    reason\n  }\n  ... on InvalidAttributesError {\n    code\n    reason\n    received_attributes {\n      attribute\n      value\n    }\n    expected_attributes {\n      email_attribute\n      first_name_attribute\n      idp_id_attribute\n      last_name_attribute\n    }\n  }\n  ... on ProfileNotAllowedOutsideOrganizationError {\n    code\n    reason\n  }\n  ... on DecryptionFailedError {\n    code\n    reason\n  }\n  ... on IdpInitiatedExpiredResponseError {\n    code\n    reason\n  }\n  ... on IdpInitiatedWithInResponseToError {\n    code\n    reason\n  }\n  ... on MissingSamlIdpUrlError {\n    code\n    reason\n  }\n  ... on MissingSamlRelyingPartyPrivateKeyError {\n    code\n    reason\n  }\n  ... on MissingSamlEntityIdError {\n    code\n    reason\n  }\n  ... on AcsUrlNotFoundError {\n    acsUrl\n    code\n    reason\n  }\n  ... on DecryptionMalformedEncryptedAssertionError {\n    code\n    reason\n  }\n  ... on DecryptionMissingEncryptionKeyError {\n    code\n    reason\n  }\n  ... on IdpStatusCodeAuthenticationFailedError {\n    code\n    reason\n  }\n  ... on IdpStatusCodeRequestDeniedError {\n    code\n    reason\n  }\n  ... on IdpStatusCodeNotSuccessfulError {\n    code\n    reason\n  }\n  ... on InvalidAssertionError {\n    code\n    reason\n  }\n  ... on InvalidIssueInstantAssertionError {\n    code\n    reason\n  }\n  ... on ResponseReplayedError {\n    code\n    reason\n  }\n  ... on WorkOsAuthorizationCodeExpiredError {\n    code\n    reason\n  }\n  ... on WorkOsAuthorizationCodeAlreadyExchangedError {\n    code\n    reason\n  }\n  ... on OidcFailedError {\n    code\n    reason\n  }\n  ... on IdTokenInvalidError {\n    code\n    reason\n  }\n  ... on IdpIdInvalidError {\n    code\n    reason\n  }\n  ... on SamlAssertionMissingSignaturesError {\n    code\n    reason\n  }\n  ... on SamlResponseMissingAssertionError {\n    code\n    reason\n  }\n  ... on InvalidSamlSignatureError {\n    code\n    reason\n  }\n}\n    ",eJ="\n    fragment SamlSession on SAMLSession {\n  createdAt\n  id\n  samlRequest\n  samlResponse\n  samlSessionState: state\n  initiator\n  relayState\n  redirectUri\n  stateParameter\n  profile {\n    idpId\n    email\n    firstName\n    lastName\n    groups\n  }\n  errors {\n    ...ConnectionSessionError\n  }\n}\n    ".concat(eH),eX="\n    fragment ConnectionSessionData on ConnectionSession {\n  __typename\n  ... on SAMLSession {\n    ...SamlSession\n  }\n  ... on OidcSession {\n    createdAt\n    id\n    oidcSessionState: state\n    profile {\n      idpId\n      email\n      firstName\n      lastName\n      groups\n      rawAttributes\n    }\n    errors {\n      ...ConnectionSessionError\n    }\n  }\n  ... on OAuthSession {\n    createdAt\n    id\n    oauthSessionState: state\n    profile {\n      idpId\n      email\n      firstName\n      lastName\n      groups\n      rawAttributes\n    }\n    errors {\n      ...ConnectionSessionError\n    }\n  }\n}\n    ".concat(eJ,"\n").concat(eH),ej="\n    fragment SamlX509Certificate on SamlX509Certificate {\n  id\n  value\n  notBefore\n  notAfter\n}\n    ",eY="\n    fragment ConnectionAttributeMap on AttributeMap {\n  id\n  attributes {\n    idpId\n    email\n    firstName\n    lastName\n    groups\n  }\n}\n    ",eZ="\n    fragment Connection on Connection {\n  __typename\n  id\n  name\n  type\n  createdAt\n  oidc_client_id\n  oidc_client_secret\n  oidc_discovery_endpoint\n  oidc_redirect_uri\n  state\n  saml_entity_id\n  saml_sp_metadata_url\n  saml_acs_url\n  saml_idp_url\n  saml_idp_metadata_url\n  samlRelyingPartyTrusts {\n    ...SamlRelyingPartyTrust\n  }\n  samlX509Certificates {\n    ...SamlX509Certificate\n  }\n  saml {\n    idpEntityId\n  }\n  adpConnectionSslCertificates {\n    createdAt\n    id\n    value\n  }\n  attributeMap {\n    ...ConnectionAttributeMap\n  }\n  organization {\n    id\n    name\n    seeded\n  }\n}\n    ".concat("\n    fragment SamlRelyingPartyTrust on SamlRelyingPartyTrust {\n  id\n  notBefore\n  notAfter\n}\n    ","\n").concat(ej,"\n").concat(eY),e0="\n    fragment CurrentTeam on Team {\n  id\n  name\n  createdAt\n  billingDetails {\n    email\n    hasBillingAddress\n  }\n  onboarding {\n    __typename\n    ... on TeamOnboarding {\n      nextStep\n    }\n  }\n  isMfaRequired\n  isUsingConsumerDomain\n  productionState\n  userManagementActivated\n  defaultUserProvisioningRole\n  customAuthDomain\n  entitlements {\n    id\n    featureId\n  }\n}\n    ",e2="\n    fragment CustomDomain on CustomDomain {\n  __typename\n  id\n  type\n  environmentId\n  domain\n  status\n  errors\n  createdAt\n  updatedAt\n}\n    ",e5="\n    fragment CustomEmailDomain on CustomEmailDomain {\n  id\n  domain\n  status\n  spf\n  dkim1\n  dkim2\n  spfCname\n  dkim1Cname\n  dkim2Cname\n  dkim1Verified\n  dkim2Verified\n  spfVerified\n}\n    ",e9="\n    fragment OrganizationDomain on OrganizationDomain {\n  id\n  domain\n  state\n}\n    ",e3="\n    fragment DashboardOrganization on Organization {\n  id\n  name\n  createdAt\n  allowProfilesOutsideOrganization\n  usersCount\n  domains {\n    ...OrganizationDomain\n  }\n  setupLinks {\n    ... on PortalSetupLink {\n      state\n      intents\n      expiresAt\n    }\n  }\n  latestConnection {\n    type\n    state\n  }\n  latestDirectory {\n    type\n    state\n  }\n}\n    ".concat(e9),e1="\n    fragment DirectoryGroupConfig on DirectoryGroupConfig {\n  id\n  name\n  idpId\n  shouldSync\n  numberOfMemberships\n  createdAt\n}\n    ",e7="\n    fragment DirectoryUser on DirectoryUser {\n  id\n  firstName\n  lastName\n  username\n  directoryGroups {\n    id\n    name\n  }\n  state\n}\n    ",e4="\n    fragment DirectoryConfig on DirectoryConfig {\n  id\n  directoryId\n  groupsSync\n}\n    ",e6="\n    fragment DirectoryAttributeMap on DirectoryAttributeMap {\n  id\n  attributes {\n    externalId\n    username\n    emails\n    firstName\n    lastName\n    jobTitle\n    groupName\n  }\n}\n    ",e8="\n    fragment Directory on Directory {\n  __typename\n  id\n  type\n  name\n  endpoint\n  bearerToken\n  state\n  setup_url\n  config {\n    ...DirectoryConfig\n  }\n  organization {\n    id\n    name\n    domains {\n      ...OrganizationDomain\n    }\n  }\n  primaryDomain {\n    domain\n  }\n  provider {\n    __typename\n    ... on BambooHrDirectory {\n      ...BambooHrDirectory\n    }\n    ... on BreatheHrDirectory {\n      ...BreatheHrDirectory\n    }\n    ... on CezanneHrDirectory {\n      ...CezanneHrDirectory\n    }\n    ... on FourthHrDirectory {\n      ...FourthHrDirectory\n    }\n    ... on HibobDirectory {\n      ...HibobDirectory\n    }\n    ... on PeopleHrDirectory {\n      ...PeopleHrDirectory\n    }\n    ... on PersonioDirectory {\n      ...PersonioDirectory\n    }\n    ... on RipplingDirectory {\n      ...RipplingDirectory\n    }\n    ... on SftpDirectory {\n      ...SftpDirectory\n    }\n    ... on WorkdayDirectory {\n      ...WorkdayDirectory\n    }\n  }\n  attributeMap {\n    ...DirectoryAttributeMap\n  }\n}\n    ".concat(e4,"\n").concat(e9,"\n").concat("\n    fragment BambooHrDirectory on BambooHrDirectory {\n  __typename\n  subdomain\n  apiKey\n}\n    ","\n").concat("\n    fragment BreatheHrDirectory on BreatheHrDirectory {\n  __typename\n  apiKey\n}\n    ","\n").concat("\n    fragment CezanneHrDirectory on CezanneHrDirectory {\n  __typename\n  clientId\n  clientSecret\n}\n    ","\n").concat("\n    fragment FourthHrDirectory on FourthHrDirectory {\n  __typename\n  organizationId\n  username\n  password\n}\n    ","\n").concat("\n    fragment HibobDirectory on HibobDirectory {\n  __typename\n  serviceUserId\n  apiToken\n}\n    ","\n").concat("\n    fragment PeopleHrDirectory on PeopleHrDirectory {\n  __typename\n  apiKey\n}\n    ","\n").concat("\n    fragment PersonioDirectory on PersonioDirectory {\n  __typename\n  clientId\n  clientSecret\n}\n    ","\n").concat("\n    fragment RipplingDirectory on RipplingDirectory {\n  __typename\n  apiKey\n}\n    ","\n").concat("\n    fragment SftpDirectory on SftpDirectory {\n  __typename\n  publicKey\n  username\n}\n    ","\n").concat("\n    fragment WorkdayDirectory on WorkdayDirectory {\n  __typename\n  userEndpoint\n  groupEndpoint\n  username\n  password\n}\n    ","\n").concat(e6),tn="\n    fragment EnvironmentWithProjectV2 on Environment {\n  ...Environment\n  projectV2 {\n    id\n    name\n    environments {\n      ...Environment\n    }\n  }\n}\n    ".concat("\n    fragment Environment on Environment {\n  id\n  name\n  logoUrl\n  sandbox\n  clientId\n  authkitDomains {\n    id\n    domain\n  }\n}\n    "),te="\n    fragment Key on Key {\n  id\n  createdAt\n  expiredAt\n  name\n  displayValue\n}\n    ",tt="\n    fragment NewlyCreatedKey on NewlyCreatedKey {\n  key {\n    ...Key\n  }\n  value\n}\n    ".concat(te),ti="\n    fragment OAuthCredential on OAuthCredential {\n  id\n  state\n  redirectUri\n  clientId\n  clientSecret\n  isUsingCustomDomain\n  isUserlandEnabled\n}\n    ",tr="\n    fragment OrganizationAdmin on OrganizationAdmin {\n  id\n  email\n}\n    ",to="\n    fragment Organization on Organization {\n  id\n  name\n  createdAt\n  allowProfilesOutsideOrganization\n  domains {\n    ...OrganizationDomain\n  }\n  seeded\n}\n    ".concat(e9),ta="\n    fragment PortalSettings on PortalSettings {\n  id\n  defaultConnectionSuccessLink\n  defaultDirectorySuccessLink\n  defaultLogStreamsSuccessLink\n  defaultRedirectLink\n}\n    ",tu="\n    fragment PortalSetupLink on PortalSetupLink {\n  id\n  expiresAt\n  intents\n  token\n  url\n  state\n}\n    ",td="\n    fragment Profile on Profile {\n  id\n  email\n  firstName\n  connectionType\n  lastName\n  idpId\n  state\n  groups\n  rawAttributes\n  updatedAt\n}\n    ",ts="\n    fragment RedirectUri on RedirectURI {\n  id\n  uri\n  isDefault\n}\n    ",tc="\n    fragment Request on Request {\n  date\n  id\n  method\n  path\n  status\n  source\n}\n    ",tl="\n    fragment RoleConfig on RoleConfig {\n  id\n  environmentId\n  defaultRole\n  rolePriorityOrder\n  createdAt\n  updatedAt\n}\n    ",tm="\n    fragment Role on Role {\n  id\n  name\n  slug\n  description\n  state\n  environmentId\n  createdAt\n  updatedAt\n}\n    ",tp="\n    fragment SlackChannel on SlackChannel {\n  id\n  externalChannelId\n  slackTeamId\n}\n    ",tg="\n    fragment TeamInternalDirectoryGroup on InternalDirectoryGroup {\n  id\n  name\n  role\n}\n    ",ty="\n    fragment TeamInternalDirectory on InternalDirectory {\n  id\n  type\n  name\n  state\n  isSyncing\n}\n    ",tf="\n    fragment UserlandUserInvite on UserlandUserInvite {\n  __typename\n  id\n  createdAt\n  inviteeEmail\n  state\n}\n    ",tS="\n    fragment UserlandUserOrganizationMembership on UserlandUserOrganizationMembership {\n  id\n  type\n  status\n  organizationId\n  userlandUserId\n  directoryUserId\n  role\n  createdAt\n  updatedAt\n}\n    ",th="\n    fragment UserlandUser on UserlandUser {\n  __typename\n  id\n  createdAt\n  email\n  firstName\n  lastName\n  directoryUser {\n    id\n  }\n  sessionCount\n  lastSignedInAt\n  hasPassword\n  emailVerifiedAt\n  profilePictureUrl\n  authenticationFactors {\n    id\n    type\n  }\n  githubOauthProfile {\n    id\n  }\n  googleOauthProfile {\n    id\n  }\n  microsoftOauthProfile {\n    id\n  }\n  ssoProfile {\n    __typename\n    connection {\n      type\n    }\n  }\n  identities {\n    data {\n      id\n      status\n      role {\n        id\n        name\n      }\n      organization {\n        id\n        name\n      }\n    }\n  }\n}\n    ",t$="\n    fragment UntypedDirectory on UntypedDirectory {\n  __typename\n  id\n  name\n  organization {\n    id\n    name\n  }\n}\n    ",tI="\n    mutation acceptComplianceTerms {\n  acceptComplianceTerms {\n    __typename\n    ... on ComplianceTermsAccepted {\n      teamMembership {\n        complianceTermsAcceptedAt\n      }\n    }\n  }\n}\n    ",t_=n=>(0,ez.useMutation)(["acceptComplianceTerms"],n=>eK(tI,n)(),n);t_.fetcher=(n,e)=>eK(tI,n,e);let tC="\n    mutation activateUserManagement {\n  activateUserManagement {\n    __typename\n    ... on TeamNotFound {\n      teamId\n    }\n    ... on UserManagementActivated {\n      team {\n        userManagementActivated\n      }\n    }\n  }\n}\n    ",tb=n=>(0,ez.useMutation)(["activateUserManagement"],n=>eK(tC,n)(),n);tb.fetcher=(n,e)=>eK(tC,n,e);let tD="\n    mutation addAdpConnectionSslCertificate($input: AddAdpConnectionSslCertificateInput!) {\n  addAdpConnectionSslCertificate(input: $input) {\n    __typename\n    ... on AdpConnectionSslCertificateAdded {\n      adpConnectionSslCertificate {\n        id\n        value\n      }\n    }\n    ... on ConnectionNotFound {\n      connectionId\n    }\n  }\n}\n    ",tv=n=>(0,ez.useMutation)(["addAdpConnectionSslCertificate"],n=>eK(tD,n)(),n);tv.fetcher=(n,e)=>eK(tD,n,e);let tA="\n    mutation addBillingAddress($input: AddBillingAddressInput!) {\n  addBillingAddress(input: $input) {\n    __typename\n    ... on BillingAddressAdded {\n      team {\n        ...CurrentTeam\n      }\n    }\n  }\n}\n    ".concat(e0),tU=n=>(0,ez.useMutation)(["addBillingAddress"],n=>eK(tA,n)(),n);tU.fetcher=(n,e)=>eK(tA,n,e);let tM="\n    mutation addOrganizationAdmin($input: AddOrganizationAdminInput!) {\n  addOrganizationAdmin(input: $input) {\n    __typename\n    ... on OrganizationAdminAdded {\n      organizationAdmin {\n        ...OrganizationAdmin\n      }\n    }\n    ... on OrganizationNotFound {\n      organizationId\n    }\n    ... on InvalidEmail {\n      email\n    }\n    ... on OrganizationAlreadyHasAdmin {\n      organizationAdmin {\n        ...OrganizationAdmin\n      }\n    }\n  }\n}\n    ".concat(tr),tE=n=>(0,ez.useMutation)(["addOrganizationAdmin"],n=>eK(tM,n)(),n);tE.fetcher=(n,e)=>eK(tM,n,e);let tL="\n    mutation addPaymentMethod($input: AddPaymentMethodInput!) {\n  addPaymentMethod(input: $input) {\n    __typename\n    ... on PaymentMethodAdded {\n      team {\n        ...CurrentTeam\n      }\n    }\n    ... on StripeCardError {\n      errorMessage\n    }\n  }\n}\n    ".concat(e0),tO=n=>(0,ez.useMutation)(["addPaymentMethod"],n=>eK(tL,n)(),n);tO.fetcher=(n,e)=>eK(tL,n,e);let tz="\n    mutation addUserlandUserToOrg($input: AddUserlandUserToOrganizationInput!) {\n  addUserlandUserToOrganization(input: $input) {\n    __typename\n    ... on OrganizationNotFound {\n      organizationId\n    }\n    ... on UserlandUserNotFound {\n      userlandUserId\n    }\n    ... on UserlandUserAddedToOrganization {\n      __typename\n    }\n  }\n}\n    ",tk=n=>(0,ez.useMutation)(["addUserlandUserToOrg"],n=>eK(tz,n)(),n);tk.fetcher=(n,e)=>eK(tz,n,e);let tR="\n    mutation addUsersToTeam($input: AddUsersToTeamInput!) {\n  addUsersToTeam(input: $input) {\n    invitedMembers {\n      id\n      role\n    }\n  }\n}\n    ",tP=n=>(0,ez.useMutation)(["addUsersToTeam"],n=>eK(tR,n)(),n);tP.fetcher=(n,e)=>eK(tR,n,e);let tT="\n    mutation assignRoleToInternalDirectoryGroup($input: AssignRoleToInternalDirectoryGroupInput!) {\n  assignRoleToInternalDirectoryGroup(input: $input) {\n    __typename\n    ... on RoleAssignedToInternalDirectoryGroup {\n      internalDirectoryGroup {\n        ...TeamInternalDirectoryGroup\n      }\n    }\n    ... on InternalDirectoryGroupNotFound {\n      internalDirectoryGroupId\n    }\n  }\n}\n    ".concat(tg),tF=n=>(0,ez.useMutation)(["assignRoleToInternalDirectoryGroup"],n=>eK(tT,n)(),n);tF.fetcher=(n,e)=>eK(tT,n,e);let tN="\n    mutation authorizeErrorWithTestIdp($input: AuthorizeErrorWithTestIdpInput!) {\n  authorizeErrorWithTestIdp(input: $input) {\n    callbackUrl\n  }\n}\n    ",tK=n=>(0,ez.useMutation)(["authorizeErrorWithTestIdp"],n=>eK(tN,n)(),n);tK.fetcher=(n,e)=>eK(tN,n,e);let tV="\n    mutation authorizeWithTestIdp($input: AuthorizeWithTestIdpInput!) {\n  authorizeWithTestIdp(input: $input) {\n    callbackUrl\n  }\n}\n    ",tq=n=>(0,ez.useMutation)(["authorizeWithTestIdp"],n=>eK(tV,n)(),n);tq.fetcher=(n,e)=>eK(tV,n,e);let tG="\n    mutation completeOnboardingGuide($input: CompleteOnboardingGuideInput!) {\n  completeOnboardingGuide(input: $input) {\n    ... on OnboardingGuideCompleted {\n      success\n    }\n  }\n}\n    ",tB=n=>(0,ez.useMutation)(["completeOnboardingGuide"],n=>eK(tG,n)(),n);tB.fetcher=(n,e)=>eK(tG,n,e);let tw="\n    mutation configureDatadogActivityStream($id: String!, $apiKey: String!, $region: String!) {\n  configureDatadogWebhookEndpoint(id: $id, apiKey: $apiKey, region: $region) {\n    __typename\n    ... on WebhookEndpoint {\n      id\n    }\n    ... on InvalidDatadogCredentials {\n      message\n    }\n  }\n}\n    ",tx=n=>(0,ez.useMutation)(["configureDatadogActivityStream"],n=>eK(tw,n)(),n);tx.fetcher=(n,e)=>eK(tw,n,e);let tQ="\n    mutation configureDatadogLogStream($input: ConfigureDatadogLogStreamInput!) {\n  configureDatadogLogStream(input: $input) {\n    __typename\n    ... on AuditLogStreamConfigured {\n      __typename\n      auditLogStream {\n        id\n      }\n    }\n    ... on AuditLogStreamNotFound {\n      __typename\n      auditLogStreamId\n    }\n    ... on InvalidAuditLogStreamCredentials {\n      __typename\n      message\n    }\n  }\n}\n    ",tW=n=>(0,ez.useMutation)(["configureDatadogLogStream"],n=>eK(tQ,n)(),n);tW.fetcher=(n,e)=>eK(tQ,n,e);let tH="\n    mutation configureGenericHttpsLogStream($input: ConfigureGenericHttpsLogStreamInput!) {\n  configureGenericHttpsLogStream(input: $input) {\n    __typename\n    ... on AuditLogStreamConfigured {\n      __typename\n      auditLogStream {\n        id\n      }\n    }\n    ... on AuditLogStreamNotFound {\n      __typename\n      auditLogStreamId\n    }\n    ... on InvalidAuditLogStreamCredentials {\n      __typename\n      message\n    }\n  }\n}\n    ",tJ=n=>(0,ez.useMutation)(["configureGenericHttpsLogStream"],n=>eK(tH,n)(),n);tJ.fetcher=(n,e)=>eK(tH,n,e);let tX="\n    mutation configureGoogleCloudStorageLogStream($input: ConfigureGoogleCloudStorageLogStreamInput!) {\n  configureGoogleCloudStorageLogStream(input: $input) {\n    __typename\n    ... on AuditLogStreamConfigured {\n      __typename\n      auditLogStream {\n        id\n      }\n    }\n    ... on AuditLogStreamNotFound {\n      __typename\n      auditLogStreamId\n    }\n    ... on InvalidAuditLogStreamCredentials {\n      __typename\n      message\n    }\n  }\n}\n    ",tj=n=>(0,ez.useMutation)(["configureGoogleCloudStorageLogStream"],n=>eK(tX,n)(),n);tj.fetcher=(n,e)=>eK(tX,n,e);let tY="\n    mutation configureS3LogStream($input: ConfigureS3LogStreamInput!) {\n  configureS3LogStream(input: $input) {\n    __typename\n    ... on AuditLogStreamConfigured {\n      __typename\n      auditLogStream {\n        id\n      }\n    }\n    ... on AuditLogStreamNotFound {\n      __typename\n      auditLogStreamId\n    }\n    ... on InvalidAuditLogStreamCredentials {\n      __typename\n      message\n    }\n  }\n}\n    ",tZ=n=>(0,ez.useMutation)(["configureS3LogStream"],n=>eK(tY,n)(),n);tZ.fetcher=(n,e)=>eK(tY,n,e);let t0="\n    mutation configureSplunkLogStream($input: ConfigureSplunkLogStreamInput!) {\n  configureSplunkLogStream(input: $input) {\n    __typename\n    ... on AuditLogStreamConfigured {\n      __typename\n      auditLogStream {\n        id\n      }\n    }\n    ... on AuditLogStreamNotFound {\n      __typename\n      auditLogStreamId\n    }\n    ... on InvalidAuditLogStreamCredentials {\n      __typename\n      message\n    }\n  }\n}\n    ",t2=n=>(0,ez.useMutation)(["configureSplunkLogStream"],n=>eK(t0,n)(),n);t2.fetcher=(n,e)=>eK(t0,n,e);let t5="\n    mutation createAuditLogExport($input: CreateAuditLogExportInput!) {\n  createAuditLogExport(input: $input) {\n    __typename\n    ... on AuditLogExport {\n      id\n      state\n      url\n    }\n    ... on NoAuditLogEventsFound {\n      message\n    }\n    ... on InvalidExportDateRange {\n      message\n    }\n  }\n}\n    ",t9=n=>(0,ez.useMutation)(["createAuditLogExport"],n=>eK(t5,n)(),n);t9.fetcher=(n,e)=>eK(t5,n,e);let t3="\n    mutation createAuditLogStream($input: CreateAuditLogStreamInput!) {\n  createAuditLogStream(input: $input) {\n    ... on AuditLogStream {\n      ...AuditLogStream\n    }\n  }\n}\n    ".concat(eG),t1=n=>(0,ez.useMutation)(["createAuditLogStream"],n=>eK(t3,n)(),n);t1.fetcher=(n,e)=>eK(t3,n,e);let t7="\n    mutation createAuditLogValidatorVersion($input: CreateAuditLogValidatorVersionInput!) {\n  createAuditLogValidatorVersion(input: $input) {\n    __typename\n    ... on AuditLogValidatorVersionCreated {\n      auditLogValidatorVersion {\n        id\n        version\n      }\n    }\n    ... on AuditLogValidatorNotFound {\n      auditLogValidatorId\n    }\n    ... on InvalidAuditLogSchema {\n      message\n    }\n    ... on InvalidAuditLogTargets {\n      message\n      targets\n    }\n  }\n}\n    ",t4=n=>(0,ez.useMutation)(["createAuditLogValidatorVersion"],n=>eK(t7,n)(),n);t4.fetcher=(n,e)=>eK(t7,n,e);let t6="\n    mutation createAuditLogValidator($input: CreateAuditLogValidatorInput!) {\n  createAuditLogValidator(input: $input) {\n    __typename\n    ... on AuditLogValidatorCreated {\n      auditLogValidator {\n        id\n      }\n    }\n    ... on AuditLogActionAlreadyExists {\n      message\n    }\n    ... on InvalidAuditLogSchema {\n      message\n    }\n    ... on InvalidAuditLogAction {\n      message\n    }\n    ... on InvalidAuditLogTargets {\n      message\n      targets\n    }\n  }\n}\n    ",t8=n=>(0,ez.useMutation)(["createAuditLogValidator"],n=>eK(t6,n)(),n);t8.fetcher=(n,e)=>eK(t6,n,e);let ie="\n    mutation createComplianceExport($input: CreateComplianceExportInput!) {\n  createComplianceExport(input: $input) {\n    __typename\n    ... on ComplianceExportCreated {\n      complianceExport {\n        url\n        type\n      }\n    }\n  }\n}\n    ",it=n=>(0,ez.useMutation)(["createComplianceExport"],n=>eK(ie,n)(),n);it.fetcher=(n,e)=>eK(ie,n,e);let ii="\n    mutation createConnection($input: CreateConnectionInput!) {\n  createConnection(input: $input) {\n    __typename\n    ... on ConnectionCreated {\n      connection {\n        id\n        name\n        type\n      }\n    }\n    ... on OrganizationNotFound {\n      organizationId\n    }\n  }\n}\n    ",ir=n=>(0,ez.useMutation)(["createConnection"],n=>eK(ii,n)(),n);ir.fetcher=(n,e)=>eK(ii,n,e);let io="\n    mutation createCustomDomain($input: CreateCustomDomainInput!) {\n  createCustomDomain(input: $input) {\n    ... on InvalidCustomDomain {\n      __typename\n      domain\n    }\n    ... on DomainTypeAlreadyExists {\n      __typename\n      domain\n      type\n    }\n    ... on CustomDomainCreated {\n      __typename\n      customDomain {\n        ...CustomDomain\n      }\n    }\n    ... on EnvironmentNotFound {\n      __typename\n      environmentId\n    }\n    ... on DomainUnavailable {\n      __typename\n      domain\n    }\n  }\n}\n    ".concat(e2),ia=n=>(0,ez.useMutation)(["createCustomDomain"],n=>eK(io,n)(),n);ia.fetcher=(n,e)=>eK(io,n,e);let iu="\n    mutation createCustomEmailDomain($input: CreateCustomEmailDomainInput!) {\n  createCustomEmailDomain(input: $input) {\n    ... on InvalidCustomEmailDomain {\n      __typename\n      domain\n    }\n    ... on CustomEmailDomainAlreadyExistForProject {\n      __typename\n      projectId\n    }\n    ... on CustomEmailDomainCreated {\n      __typename\n      customEmailDomain {\n        ...CustomEmailDomain\n      }\n    }\n  }\n}\n    ".concat(e5),id=n=>(0,ez.useMutation)(["createCustomEmailDomain"],n=>eK(iu,n)(),n);id.fetcher=(n,e)=>eK(iu,n,e);let is="\n    mutation createDatadogActivityStream($environmentId: String!, $apiKey: String!, $region: String!) {\n  createDatadogWebhookEndpoint(\n    environmentId: $environmentId\n    apiKey: $apiKey\n    region: $region\n  ) {\n    __typename\n    ... on WebhookEndpoint {\n      __typename\n      id\n    }\n    ... on InvalidDatadogCredentials {\n      __typename\n      message\n    }\n  }\n}\n    ",ic=n=>(0,ez.useMutation)(["createDatadogActivityStream"],n=>eK(is,n)(),n);ic.fetcher=(n,e)=>eK(is,n,e);let il="\n    mutation CreateDirectoryConfig($input: CreateDirectoryConfigInput!) {\n  createDirectoryConfigDashboard(input: $input) {\n    __typename\n    ... on DirectoryConfigCreatedDashboard {\n      directoryConfig {\n        ...DirectoryConfig\n      }\n    }\n    ... on DirectoryConfigAlreadyExistsDashboard {\n      directoryConfigId\n    }\n  }\n}\n    ".concat(e4),im=n=>(0,ez.useMutation)(["CreateDirectoryConfig"],n=>eK(il,n)(),n);im.fetcher=(n,e)=>eK(il,n,e);let ip="\n    mutation createDirectory($organizationId: String!, $name: String!, $type: DirectoryType!, $domain: String) {\n  createDirectory(\n    organization_id: $organizationId\n    name: $name\n    type: $type\n    domain: $domain\n  ) {\n    id\n  }\n}\n    ",ig=n=>(0,ez.useMutation)(["createDirectory"],n=>eK(ip,n)(),n);ig.fetcher=(n,e)=>eK(ip,n,e);let iy="\n    mutation createKey($input: CreateKeyInput!) {\n  createKey(input: $input) {\n    __typename\n    ... on KeyCreated {\n      key {\n        ...NewlyCreatedKey\n      }\n    }\n  }\n}\n    ".concat(tt),iS=n=>(0,ez.useMutation)(["createKey"],n=>eK(iy,n)(),n);iS.fetcher=(n,e)=>eK(iy,n,e);let ih="\n    mutation createOAuthCredentials($input: CreateOauthCredentialsInput!) {\n  createOauthCredentials(input: $input) {\n    oauthCredentials {\n      ...OAuthCredential\n    }\n  }\n}\n    ".concat(ti),i$=n=>(0,ez.useMutation)(["createOAuthCredentials"],n=>eK(ih,n)(),n);i$.fetcher=(n,e)=>eK(ih,n,e);let iI="\n    mutation createOrganization($input: CreateOrganizationInput!) {\n  createOrganization(input: $input) {\n    __typename\n    ... on OrganizationCreated {\n      organization {\n        id\n        name\n        domains {\n          ...OrganizationDomain\n        }\n      }\n    }\n    ... on EnvironmentNotFound {\n      environmentId\n    }\n    ... on OrganizationDomainAlreadyInUse {\n      domain\n      organization {\n        id\n        name\n      }\n    }\n  }\n}\n    ".concat(e9),i_=n=>(0,ez.useMutation)(["createOrganization"],n=>eK(iI,n)(),n);i_.fetcher=(n,e)=>eK(iI,n,e);let iC="\n    mutation createRoleV2($input: CreateRoleInput!) {\n  createRoleV2(input: $input) {\n    __typename\n    ... on EnvironmentNotFound {\n      environmentId\n    }\n    ... on RoleAlreadyExists {\n      slug\n    }\n    ... on RoleCreatedV2 {\n      role {\n        ...Role\n      }\n      roleConfig {\n        ...RoleConfig\n      }\n    }\n  }\n}\n    ".concat(tm,"\n").concat(tl),ib=n=>(0,ez.useMutation)(["createRoleV2"],n=>eK(iC,n)(),n);ib.fetcher=(n,e)=>eK(iC,n,e);let iD="\n    mutation createUserlandUserInvite($input: CreateUserlandUserInviteInput!) {\n  createUserlandUserInvite(input: $input) {\n    __typename\n    ... on EnvironmentNotFound {\n      __typename\n    }\n    ... on OrganizationNotFound {\n      __typename\n    }\n    ... on UserlandUserNotFound {\n      __typename\n    }\n    ... on CreateUserlandUserInviteExpiresInDaysTooLong {\n      __typename\n    }\n    ... on CreateUserlandUserInviteExpiresInDaysTooShort {\n      __typename\n    }\n    ... on CreateUserlandUserInviteUserAlreadyExists {\n      __typename\n    }\n    ... on CreateUserlandUserInviteUserAlreadyOrganizationMember {\n      __typename\n    }\n    ... on CreateUserlandUserInviteInvalidInviteeEmail {\n      __typename\n    }\n    ... on CreateUserlandUserInviteEmailAlreadyInvitedToEnvironment {\n      __typename\n    }\n    ... on CreateUserlandUserInviteEmailAlreadyInvitedToOrganization {\n      __typename\n    }\n    ... on CreateUserlandUserInviteInvalidRole {\n      __typename\n    }\n    ... on UserlandUserInviteCreated {\n      userlandUserInvite {\n        id\n      }\n    }\n  }\n}\n    ",iv=n=>(0,ez.useMutation)(["createUserlandUserInvite"],n=>eK(iD,n)(),n);iv.fetcher=(n,e)=>eK(iD,n,e);let iA="\n    mutation createUserlandUser($input: CreateUserlandUserInput!) {\n  createUserlandUser(input: $input) {\n    __typename\n    ... on EnvironmentNotFound {\n      __typename\n    }\n    ... on PasswordAuthDisabled {\n      __typename\n    }\n    ... on UserlandUserValidationFailed {\n      __typename\n      errors {\n        __typename\n        ... on UserlandUserPasswordMissingCharacterType {\n          characterType\n          symbols\n        }\n      }\n    }\n    ... on UserlandUserCreated {\n      userlandUser {\n        id\n      }\n    }\n  }\n}\n    ",iU=n=>(0,ez.useMutation)(["createUserlandUser"],n=>eK(iA,n)(),n);iU.fetcher=(n,e)=>eK(iA,n,e);let iM="\n    mutation createWebhookEndpoint($endpointUrl: String!, $environmentId: String!, $events: [String!]!) {\n  createWebhookEndpoint(\n    endpointUrl: $endpointUrl\n    environmentId: $environmentId\n    events: $events\n  ) {\n    id\n  }\n}\n    ",iE=n=>(0,ez.useMutation)(["createWebhookEndpoint"],n=>eK(iM,n)(),n);iE.fetcher=(n,e)=>eK(iM,n,e);let iL="\n    mutation deleteAdpConnectionSslCertificate($input: DeleteAdpConnectionSslCertificateInput!) {\n  deleteAdpConnectionSslCertificate(input: $input) {\n    __typename\n    ... on AdpConnectionSslCertificateDeleted {\n      certificateId\n    }\n    ... on AdpConnectionSslCertificateNotFound {\n      certificateId\n    }\n  }\n}\n    ",iO=n=>(0,ez.useMutation)(["deleteAdpConnectionSslCertificate"],n=>eK(iL,n)(),n);iO.fetcher=(n,e)=>eK(iL,n,e);let iz="\n    mutation deleteAuditLogStream($input: DeleteAuditLogStreamInput!) {\n  deleteAuditLogStream(input: $input) {\n    __typename\n    ... on AuditLogStreamDeleted {\n      auditLogStream {\n        id\n      }\n    }\n    ... on AuditLogStreamNotFound {\n      auditLogStreamId\n    }\n  }\n}\n    ",ik=n=>(0,ez.useMutation)(["deleteAuditLogStream"],n=>eK(iz,n)(),n);ik.fetcher=(n,e)=>eK(iz,n,e);let iR="\n    mutation deleteAuditLogValidator($input: DeleteAuditLogValidatorInput!) {\n  deleteAuditLogValidator(input: $input) {\n    __typename\n    ... on AuditLogValidatorDeleted {\n      auditLogValidator {\n        id\n      }\n    }\n    ... on AuditLogValidatorNotFound {\n      auditLogValidatorId\n    }\n  }\n}\n    ",iP=n=>(0,ez.useMutation)(["deleteAuditLogValidator"],n=>eK(iR,n)(),n);iP.fetcher=(n,e)=>eK(iR,n,e);let iT="\n    mutation deleteAuditLogValidatorVersion($input: DeleteAuditLogValidatorVersionInput!) {\n  deleteAuditLogValidatorVersion(input: $input) {\n    __typename\n    ... on AuditLogValidatorVersionDeleted {\n      auditLogValidatorVersion {\n        id\n        version\n      }\n    }\n    ... on AuditLogValidatorVersionNotFound {\n      auditLogValidatorVersionId\n    }\n  }\n}\n    ",iF=n=>(0,ez.useMutation)(["deleteAuditLogValidatorVersion"],n=>eK(iT,n)(),n);iF.fetcher=(n,e)=>eK(iT,n,e);let iN="\n    mutation deleteConnection($id: String!) {\n  deleteConnection(id: $id)\n}\n    ",iK=n=>(0,ez.useMutation)(["deleteConnection"],n=>eK(iN,n)(),n);iK.fetcher=(n,e)=>eK(iN,n,e);let iV="\n    mutation deleteCustomDomain($input: DeleteCustomDomainInput!) {\n  deleteCustomDomain(input: $input) {\n    ... on CustomDomainDeleted {\n      __typename\n      customDomainId\n    }\n    ... on CustomDomainNotFound {\n      __typename\n      customDomainId\n    }\n  }\n}\n    ",iq=n=>(0,ez.useMutation)(["deleteCustomDomain"],n=>eK(iV,n)(),n);iq.fetcher=(n,e)=>eK(iV,n,e);let iG="\n    mutation deleteCustomEmailDomain {\n  deleteCustomEmailDomain {\n    ... on DomainDeletionSuccess {\n      __typename\n      id\n    }\n  }\n}\n    ",iB=n=>(0,ez.useMutation)(["deleteCustomEmailDomain"],n=>eK(iG,n)(),n);iB.fetcher=(n,e)=>eK(iG,n,e);let iw="\n    mutation deleteDirectory($input: DeleteDirectoryInput!) {\n  deleteDirectory(input: $input) {\n    directory {\n      id\n    }\n  }\n}\n    ",ix=n=>(0,ez.useMutation)(["deleteDirectory"],n=>eK(iw,n)(),n);ix.fetcher=(n,e)=>eK(iw,n,e);let iQ="\n    mutation deleteOrganizationAdminMembership($input: DeleteOrganizationAdminMembershipInput!) {\n  deleteOrganizationAdminMembership(input: $input) {\n    __typename\n    ... on OrganizationAdminMembershipDeleted {\n      organizationAdminId\n    }\n    ... on OrganizationAdminNotFound {\n      organizationAdminId\n      organizationId\n    }\n    ... on OrganizationNotFound {\n      organizationId\n    }\n  }\n}\n    ",iW=n=>(0,ez.useMutation)(["deleteOrganizationAdminMembership"],n=>eK(iQ,n)(),n);iW.fetcher=(n,e)=>eK(iQ,n,e);let iH="\n    mutation deleteOrganization($input: DeleteOrganizationInput!) {\n  deleteOrganization(input: $input) {\n    organization {\n      id\n    }\n  }\n}\n    ",iJ=n=>(0,ez.useMutation)(["deleteOrganization"],n=>eK(iH,n)(),n);iJ.fetcher=(n,e)=>eK(iH,n,e);let iX="\n    mutation deleteRoleV2($input: DeleteRoleInput!) {\n  deleteRoleV2(input: $input) {\n    __typename\n    ... on EnvironmentNotFound {\n      environmentId\n    }\n    ... on RoleNotFound {\n      roleId\n    }\n    ... on RoleDeletedV2 {\n      roleConfig {\n        id\n        environmentId\n        defaultRole\n        rolePriorityOrder\n      }\n    }\n  }\n}\n    ",ij=n=>(0,ez.useMutation)(["deleteRoleV2"],n=>eK(iX,n)(),n);ij.fetcher=(n,e)=>eK(iX,n,e);let iY="\n    mutation deleteSamlX509Certificate($input: DeleteSamlX509CertificateInput!) {\n  deleteSamlX509Certificate(input: $input) {\n    ... on SamlX509CertificateDeleted {\n      samlX509Certificate {\n        id\n      }\n    }\n    ... on SamlX509CertificateNotFound {\n      samlX509CertificateId\n    }\n  }\n}\n    ",iZ=n=>(0,ez.useMutation)(["deleteSamlX509Certificate"],n=>eK(iY,n)(),n);iZ.fetcher=(n,e)=>eK(iY,n,e);let i0="\n    mutation deleteUserlandUser($input: DeleteUserlandUserInput!) {\n  deleteUserlandUser(input: $input) {\n    __typename\n    ... on UserlandUserNotFound {\n      __typename\n    }\n    ... on UserlandUserDeleted {\n      __typename\n    }\n  }\n}\n    ",i2=n=>(0,ez.useMutation)(["deleteUserlandUser"],n=>eK(i0,n)(),n);i2.fetcher=(n,e)=>eK(i0,n,e);let i5="\n    mutation deleteWebhookEndpoint($id: String!) {\n  deleteWebhookEndpoint(id: $id)\n}\n    ",i9=n=>(0,ez.useMutation)(["deleteWebhookEndpoint"],n=>eK(i5,n)(),n);i9.fetcher=(n,e)=>eK(i5,n,e);let i3="\n    mutation EnableSyncForDirectoryGroups($input: EnableSyncForDirectoryGroupsInput!) {\n  enableSyncForDirectoryGroupsDashboard(input: $input) {\n    __typename\n    ... on DirectoryGroupsEnabledForSyncDashboard {\n      enabledDirectoryGroupConfigs {\n        ...DirectoryGroupConfig\n      }\n    }\n    ... on MissingDirectoryGroupsToSyncDashboard {\n      directoryId\n    }\n  }\n}\n    ".concat(e1),i1=n=>(0,ez.useMutation)(["EnableSyncForDirectoryGroups"],n=>eK(i3,n)(),n);i1.fetcher=(n,e)=>eK(i3,n,e);let i7="\n    mutation enrollTotpAuthenticationFactor {\n  enrollTotpAuthenticationFactor {\n    __typename\n    ... on TotpUserAuthenticationFactorEnrolled {\n      challengeId\n      qrCode\n      secret\n    }\n  }\n}\n    ",i4=n=>(0,ez.useMutation)(["enrollTotpAuthenticationFactor"],n=>eK(i7,n)(),n);i4.fetcher=(n,e)=>eK(i7,n,e);let i6="\n    mutation entitlementsUserClickedUpgradeButton($input: EntitlementUserClickedUpgradeButtonInput!) {\n  entitlementsUserClickedUpgradeButton(input: $input) {\n    success\n  }\n}\n    ",i8=n=>(0,ez.useMutation)(["entitlementsUserClickedUpgradeButton"],n=>eK(i6,n)(),n);i8.fetcher=(n,e)=>eK(i6,n,e);let rn="\n    mutation expireKey($input: ExpireKeyInput!) {\n  expireKey(input: $input) {\n    __typename\n    ... on KeyExpired {\n      expiredKey {\n        ...Key\n      }\n      newKey {\n        ...NewlyCreatedKey\n      }\n    }\n  }\n}\n    ".concat(te,"\n").concat(tt),re=n=>(0,ez.useMutation)(["expireKey"],n=>eK(rn,n)(),n);re.fetcher=(n,e)=>eK(rn,n,e);let rt="\n    mutation expirePortalSetupLinks($input: ExpirePortalSetupLinksInput!) {\n  expirePortalSetupLinks(input: $input) {\n    __typename\n    ... on PortalSetupLinksExpired {\n      organization {\n        id\n      }\n    }\n    ... on OrganizationNotFound {\n      organizationId\n    }\n  }\n}\n    ",ri=n=>(0,ez.useMutation)(["expirePortalSetupLinks"],n=>eK(rt,n)(),n);ri.fetcher=(n,e)=>eK(rt,n,e);let rr="\n    mutation generatePortalLink($input: GeneratePortalLinkInput!) {\n  generatePortalLink(input: $input) {\n    __typename\n    ... on PortalLinkGenerated {\n      portalLink\n    }\n    ... on SsoAlreadyConnectedForDomain {\n      domain\n    }\n  }\n}\n    ",ro=n=>(0,ez.useMutation)(["generatePortalLink"],n=>eK(rr,n)(),n);ro.fetcher=(n,e)=>eK(rr,n,e);let ra="\n    mutation generatePortalSetupLink($input: GeneratePortalSetupLinkInput!) {\n  generatePortalSetupLink(input: $input) {\n    __typename\n    ... on PortalSetupLinkGenerated {\n      portalSetupLink {\n        ...PortalSetupLink\n      }\n    }\n    ... on OrganizationNotFound {\n      organizationId\n    }\n  }\n}\n    ".concat(tu),ru=n=>(0,ez.useMutation)(["generatePortalSetupLink"],n=>eK(ra,n)(),n);ru.fetcher=(n,e)=>eK(ra,n,e);let rd="\n    mutation generateSharedSlackChannel {\n  generateSharedSlackChannel {\n    __typename\n    ... on SharedSlackChannelGenerated {\n      slackChannel {\n        ...SlackChannel\n      }\n    }\n  }\n}\n    ".concat(tp),rs=n=>(0,ez.useMutation)(["generateSharedSlackChannel"],n=>eK(rd,n)(),n);rs.fetcher=(n,e)=>eK(rd,n,e);let rc="\n    mutation impersonateUserlandUser($input: ImpersonateUserlandUserInput!) {\n  impersonateUserlandUser(input: $input) {\n    __typename\n    ... on ImpersonationSessionCreated {\n      url\n    }\n    ... on ImpersonationDisabled {\n      message\n    }\n    ... on ImpersonationOrganizationSelectionRequired {\n      message\n    }\n    ... on ImpersonationReasonRequired {\n      message\n    }\n    ... on DefaultRedirectUriNotFound {\n      message\n    }\n  }\n}\n    ",rl=n=>(0,ez.useMutation)(["impersonateUserlandUser"],n=>eK(rc,n)(),n);rl.fetcher=(n,e)=>eK(rc,n,e);let rm="\n    mutation inviteToSharedSlackChannel {\n  inviteToSharedSlackChannel {\n    __typename\n    ... on SlackChannelInviteSent {\n      slackChannel {\n        id\n      }\n    }\n    ... on SlackChannelNotReadyForInvites {\n      slackChannel {\n        id\n      }\n    }\n    ... on SlackChannelForTeamNotFound {\n      teamId\n    }\n  }\n}\n    ",rp=n=>(0,ez.useMutation)(["inviteToSharedSlackChannel"],n=>eK(rm,n)(),n);rp.fetcher=(n,e)=>eK(rm,n,e);let rg="\n    mutation inviteUserToTeam($input: InviteUserToTeamInput!) {\n  inviteUserToTeam(input: $input) {\n    __typename\n    ... on UserInvitedToTeam {\n      invitedMember {\n        id\n        role\n        state\n        user {\n          id\n          email\n          name\n        }\n      }\n    }\n    ... on UserAlreadyBelongsToCurrentTeam {\n      email\n    }\n    ... on UserAlreadyBelongsToAnotherTeam {\n      email\n    }\n  }\n}\n    ",ry=n=>(0,ez.useMutation)(["inviteUserToTeam"],n=>eK(rg,n)(),n);ry.fetcher=(n,e)=>eK(rg,n,e);let rf="\n    mutation completeOnboardingStep($input: OnboardingCompleteStepInput!) {\n  onboarding_completeStep(input: $input) {\n    team {\n      ...CurrentTeam\n    }\n  }\n}\n    ".concat(e0),rS=n=>(0,ez.useMutation)(["completeOnboardingStep"],n=>eK(rf,n)(),n);rS.fetcher=(n,e)=>eK(rf,n,e);let rh="\n    mutation enterOnboardingTeamDetails($input: OnboardingEnterTeamDetailsInput!) {\n  onboarding_enterTeamDetails(input: $input) {\n    user {\n      id\n    }\n    team {\n      id\n    }\n  }\n}\n    ",r$=n=>(0,ez.useMutation)(["enterOnboardingTeamDetails"],n=>eK(rh,n)(),n);r$.fetcher=(n,e)=>eK(rh,n,e);let rI="\n    mutation refreshCustomDomain($id: String!) {\n  refreshCustomDomain(id: $id) {\n    ... on CustomDomainNotFound {\n      __typename\n      customDomainId\n    }\n    ... on CustomDomainRefreshed {\n      __typename\n      customDomain {\n        ...CustomDomain\n      }\n    }\n  }\n}\n    ".concat(e2),r_=n=>(0,ez.useMutation)(["refreshCustomDomain"],n=>eK(rI,n)(),n);r_.fetcher=(n,e)=>eK(rI,n,e);let rC="\n    mutation registerCustomDomain($input: RegisterCustomDomainInput!) {\n  registerCustomDomain(input: $input) {\n    __typename\n    ... on CustomDomainRegistered {\n      customDomain\n    }\n  }\n}\n    ",rb=n=>(0,ez.useMutation)(["registerCustomDomain"],n=>eK(rC,n)(),n);rb.fetcher=(n,e)=>eK(rC,n,e);let rD="\n    mutation removeMemberFromOrganization($input: RemoveUserlandUserFromOrganizationInput!) {\n  removeUserlandUserFromOrganization(input: $input) {\n    __typename\n    ... on OrganizationNotFound {\n      __typename\n      organizationId\n    }\n    ... on UserlandUserNotFound {\n      __typename\n      userlandUserId\n    }\n    ... on UserlandUserOrganizationMembershipNotFound {\n      __typename\n      message\n    }\n    ... on UserlandUserRemovedFromOrganization {\n      __typename\n    }\n  }\n}\n    ",rv=n=>(0,ez.useMutation)(["removeMemberFromOrganization"],n=>eK(rD,n)(),n);rv.fetcher=(n,e)=>eK(rD,n,e);let rA="\n    mutation removeUserFromTeam($usersOrganizationsId: String!) {\n  removeUserFromTeam(usersOrganizationsId: $usersOrganizationsId)\n}\n    ",rU=n=>(0,ez.useMutation)(["removeUserFromTeam"],n=>eK(rA,n)(),n);rU.fetcher=(n,e)=>eK(rA,n,e);let rM="\n    mutation resendUserlandUserInvite($input: ResendUserlandUserInviteInput!) {\n  resendUserlandUserInvite(input: $input) {\n    __typename\n    ... on UserlandUserInviteNotFound {\n      __typename\n    }\n    ... on UserlandUserInviteNotPending {\n      __typename\n    }\n    ... on UserlandUserInviteResent {\n      userlandUserInvite {\n        id\n      }\n    }\n  }\n}\n    ",rE=n=>(0,ez.useMutation)(["resendUserlandUserInvite"],n=>eK(rM,n)(),n);rE.fetcher=(n,e)=>eK(rM,n,e);let rL="\n    mutation resendWebhookEvent($input: ResendWebhookEventInput!) {\n  resendWebhookEvent(input: $input) {\n    __typename\n    ... on WebhookEventNotFound {\n      webhookId\n    }\n    ... on ResendNotAllowedForEnvironment {\n      environmentId\n    }\n    ... on ResendWebhookEventSuccessful {\n      webhookId\n    }\n    ... on ResendWebhookEventFailed {\n      webhookId\n    }\n  }\n}\n    ",rO=n=>(0,ez.useMutation)(["resendWebhookEvent"],n=>eK(rL,n)(),n);rO.fetcher=(n,e)=>eK(rL,n,e);let rz="\n    mutation resetUserMfaSettings($input: ResetUserMfaSettingsInput!) {\n  resetUserMfaSettings(input: $input) {\n    __typename\n    ... on UserMfaSettingsReset {\n      userId\n    }\n  }\n}\n    ",rk=n=>(0,ez.useMutation)(["resetUserMfaSettings"],n=>eK(rz,n)(),n);rk.fetcher=(n,e)=>eK(rz,n,e);let rR="\n    mutation resetUserlandUserAuthenticationFactors($input: ResetUserlandUserAuthenticationFactorsInput!) {\n  resetUserlandUserAuthenticationFactors(input: $input) {\n    __typename\n    ... on UserlandUserNotFound {\n      userlandUserId\n    }\n    ... on UserlandUserAuthenticationFactorsReset {\n      __typename\n    }\n  }\n}\n    ",rP=n=>(0,ez.useMutation)(["resetUserlandUserAuthenticationFactors"],n=>eK(rR,n)(),n);rP.fetcher=(n,e)=>eK(rR,n,e);let rT="\n    mutation revokeUserlandSession($input: RevokeUserlandSessionInput!) {\n  revokeUserlandSession(input: $input) {\n    ... on RevokedUserlandSession {\n      sessionId\n    }\n  }\n}\n    ",rF=n=>(0,ez.useMutation)(["revokeUserlandSession"],n=>eK(rT,n)(),n);rF.fetcher=(n,e)=>eK(rT,n,e);let rN="\n    mutation revokeUserlandUserInvite($input: RevokeUserlandUserInviteInput!) {\n  revokeUserlandUserInvite(input: $input) {\n    __typename\n    ... on UserlandUserInviteNotFound {\n      __typename\n    }\n    ... on UserlandUserInviteNotPending {\n      __typename\n    }\n    ... on UserlandUserInviteRevoked {\n      userlandUserInvite {\n        id\n      }\n    }\n  }\n}\n    ",rK=n=>(0,ez.useMutation)(["revokeUserlandUserInvite"],n=>eK(rN,n)(),n);rK.fetcher=(n,e)=>eK(rN,n,e);let rV="\n    mutation sendSetupLinksEmails($input: SendSetupLinkEmailsInput!) {\n  sendSetupLinkEmails(input: $input) {\n    __typename\n    ... on OrganizationNotFound {\n      organizationId\n    }\n    ... on SetupLinkEmailsSent {\n      organizationAdmins {\n        ...OrganizationAdmin\n      }\n    }\n    ... on MissingIntent {\n      intents\n    }\n    ... on InvalidEmail {\n      email\n    }\n    ... on SetupLinkNotFound {\n      intent\n      organizationId\n    }\n  }\n}\n    ".concat(tr),rq=n=>(0,ez.useMutation)(["sendSetupLinksEmails"],n=>eK(rV,n)(),n);rq.fetcher=(n,e)=>eK(rV,n,e);let rG="\n    mutation sendTestWebhook($webhookEndpointId: String!, $event: WebhookEventFixtures!) {\n  testWebhookEndpoint(id: $webhookEndpointId, event: $event) {\n    id\n    state\n    metadata\n    requestBody\n    responseBody\n    responseStatusCode\n  }\n}\n    ",rB=n=>(0,ez.useMutation)(["sendTestWebhook"],n=>eK(rG,n)(),n);rB.fetcher=(n,e)=>eK(rG,n,e);let rw="\n    mutation setAutoMappedDirectoryCustomAttributes($input: SetAutoMappedDirectoryCustomAttributesInput!) {\n  setAutoMappedDirectoryCustomAttributes(input: $input) {\n    __typename\n    ... on ActiveAutoMappedDirectoryCustomAttributes {\n      data {\n        id\n      }\n    }\n    ... on DirectoryCustomAttributeNotValid {\n      reason\n    }\n  }\n}\n    ",rx=n=>(0,ez.useMutation)(["setAutoMappedDirectoryCustomAttributes"],n=>eK(rw,n)(),n);rx.fetcher=(n,e)=>eK(rw,n,e);let rQ="\n    mutation setCustomMappedDirectoryCustomAttributes($input: SetCustomMappedDirectoryCustomAttributesInput!) {\n  setCustomMappedDirectoryCustomAttributes(input: $input) {\n    __typename\n    ... on CustomMappedDirectoryCustomAttributes {\n      data {\n        id\n        name\n        isRequired\n      }\n    }\n    ... on DirectoryCustomAttributeNotValid {\n      reason\n    }\n  }\n}\n    ",rW=n=>(0,ez.useMutation)(["setCustomMappedDirectoryCustomAttributes"],n=>eK(rQ,n)(),n);rW.fetcher=(n,e)=>eK(rQ,n,e);let rH="\n    mutation setDirectoryCustomAttributeMappings($input: SetDirectoryCustomAttributeMappingsInput!) {\n  setDirectoryCustomAttributeMappings(input: $input) {\n    __typename\n    ... on DirectoryCustomAttributeMappingsSet {\n      mappings {\n        id\n        attribute\n        directory {\n          id\n        }\n        customAttribute {\n          id\n        }\n      }\n    }\n    ... on DirectoryNotFound {\n      directoryId\n    }\n    ... on DirectoryCustomAttributeNotFound {\n      directoryCustomAttributeId\n    }\n  }\n}\n    ",rJ=n=>(0,ez.useMutation)(["setDirectoryCustomAttributeMappings"],n=>eK(rH,n)(),n);rJ.fetcher=(n,e)=>eK(rH,n,e);let rX="\n    mutation setEmailNotificationPreferences($input: SetEmailNotificationPreferencesInput!) {\n  setEmailNotificationPreferences(input: $input) {\n    __typename\n    ... on EmailNotificationPreferences {\n      preferences {\n        category\n        preference\n      }\n    }\n  }\n}\n    ",rj=n=>(0,ez.useMutation)(["setEmailNotificationPreferences"],n=>eK(rX,n)(),n);rj.fetcher=(n,e)=>eK(rX,n,e);let rY="\n    mutation setRedirectUris($input: SetRedirectUrisInput!) {\n  setRedirectUris(input: $input) {\n    __typename\n    ... on RedirectUrisSet {\n      redirectUris {\n        uri\n        isDefault\n        id\n      }\n    }\n    ... on InvalidRedirectUriProcotol {\n      message\n      uri\n    }\n    ... on InvalidWildcardRedirectUri {\n      message\n      uri\n    }\n  }\n}\n    ",rZ=n=>(0,ez.useMutation)(["setRedirectUris"],n=>eK(rY,n)(),n);rZ.fetcher=(n,e)=>eK(rY,n,e);let r0="\n    mutation setTeamDefaultRole($input: SetTeamDefaultRoleInput!) {\n  setTeamDefaultRole(input: $input) {\n    __typename\n    ... on TeamDefaultRoleSet {\n      team {\n        ...CurrentTeam\n      }\n    }\n  }\n}\n    ".concat(e0),r2=n=>(0,ez.useMutation)(["setTeamDefaultRole"],n=>eK(r0,n)(),n);r2.fetcher=(n,e)=>eK(r0,n,e);let r5="\n    mutation startSyncingInternalDirectory($input: StartSyncingInternalDirectoryInput!) {\n  startSyncingInternalDirectory(input: $input) {\n    __typename\n    ... on SyncingInternalDirectory {\n      internalDirectory {\n        ...TeamInternalDirectory\n      }\n    }\n  }\n}\n    ".concat(ty),r9=n=>(0,ez.useMutation)(["startSyncingInternalDirectory"],n=>eK(r5,n)(),n);r9.fetcher=(n,e)=>eK(r5,n,e);let r3="\n    mutation unassignRoleFromInternalDirectoryGroup($input: UnassignRoleFromInternalDirectoryGroupInput!) {\n  unassignRoleFromInternalDirectoryGroup(input: $input) {\n    __typename\n    ... on RoleUnassignedFromInternalDirectoryGroup {\n      internalDirectoryGroup {\n        ...TeamInternalDirectoryGroup\n      }\n    }\n    ... on InternalDirectoryGroupNotFound {\n      internalDirectoryGroupId\n    }\n  }\n}\n    ".concat(tg),r1=n=>(0,ez.useMutation)(["unassignRoleFromInternalDirectoryGroup"],n=>eK(r3,n)(),n);r1.fetcher=(n,e)=>eK(r3,n,e);let r7="\n    mutation updateAppBranding($input: UpdateAppBrandingInput!) {\n  updateAppBranding(input: $input) {\n    __typename\n    ... on AppBrandingUpdated {\n      appBranding {\n        ...AppBranding\n      }\n    }\n  }\n}\n    ".concat(eV),r4=n=>(0,ez.useMutation)(["updateAppBranding"],n=>eK(r7,n)(),n);r4.fetcher=(n,e)=>eK(r7,n,e);let r6="\n    mutation updateAttributeMap($id: String!, $idp_id_attribute: String, $email_attribute: String, $first_name_attribute: String, $last_name_attribute: String, $groups_attribute: String) {\n  updateAttributeMap(\n    attribute_map_id: $id\n    idp_id_attribute: $idp_id_attribute\n    email_attribute: $email_attribute\n    first_name_attribute: $first_name_attribute\n    last_name_attribute: $last_name_attribute\n    groupsAttribute: $groups_attribute\n  ) {\n    ...ConnectionAttributeMap\n  }\n}\n    ".concat(eY),r8=n=>(0,ez.useMutation)(["updateAttributeMap"],n=>eK(r6,n)(),n);r8.fetcher=(n,e)=>eK(r6,n,e);let on="\n    mutation updateConnectionFromDiscoveryEndpoint($input: UpdateConnectionFromDiscoveryEndpointInput!) {\n  updateConnectionFromDiscoveryEndpoint(input: $input) {\n    __typename\n    ... on ConnectionUpdatedFromDiscoveryEndpoint {\n      connection {\n        id\n        state\n        name\n        type\n        oidc_client_id\n        oidc_client_secret\n        oidc_discovery_endpoint\n        saml_acs_url\n        saml_entity_id\n        saml_idp_url\n        saml_idp_metadata_url\n        samlX509Certificates {\n          ...SamlX509Certificate\n        }\n      }\n    }\n    ... on ConnectionNotFound {\n      connectionId\n    }\n    ... on OidcDiscoveryValidationFailed {\n      errors {\n        tag\n        severity\n        helpMessage\n        reason\n      }\n    }\n  }\n}\n    ".concat(ej),oe=n=>(0,ez.useMutation)(["updateConnectionFromDiscoveryEndpoint"],n=>eK(on,n)(),n);oe.fetcher=(n,e)=>eK(on,n,e);let ot="\n    mutation updateConnectionFromMetadataUrl($input: UpdateConnectionFromMetadataUrlInput!) {\n  updateConnectionFromMetadataUrl(input: $input) {\n    __typename\n    ... on ConnectionUpdatedFromMetadataUrl {\n      connection {\n        id\n        state\n        name\n        type\n        oidc_client_id\n        oidc_client_secret\n        oidc_discovery_endpoint\n        saml_acs_url\n        saml_entity_id\n        saml_idp_url\n        saml_idp_metadata_url\n        samlX509Certificates {\n          ...SamlX509Certificate\n        }\n      }\n    }\n    ... on ConnectionNotFound {\n      connectionId\n    }\n    ... on MetadataFetchFailed {\n      reason\n    }\n    ... on InvalidSamlX509Certificate {\n      validationError\n    }\n  }\n}\n    ".concat(ej),oi=n=>(0,ez.useMutation)(["updateConnectionFromMetadataUrl"],n=>eK(ot,n)(),n);oi.fetcher=(n,e)=>eK(ot,n,e);let or="\n    mutation updateConnectionFromMetadataXml($input: UpdateConnectionFromMetadataXmlInput!) {\n  updateConnectionFromMetadataXml(input: $input) {\n    __typename\n    ... on ConnectionUpdatedFromMetadataXml {\n      connection {\n        id\n        state\n        name\n        type\n        oidc_client_id\n        oidc_client_secret\n        oidc_discovery_endpoint\n        saml_acs_url\n        saml_entity_id\n        saml_idp_url\n        saml_idp_metadata_url\n        samlX509Certificates {\n          ...SamlX509Certificate\n        }\n      }\n    }\n    ... on ConnectionNotFound {\n      connectionId\n    }\n    ... on MetadataParseFailed {\n      reason\n    }\n    ... on InvalidSamlX509Certificate {\n      validationError\n    }\n  }\n}\n    ".concat(ej),oo=n=>(0,ez.useMutation)(["updateConnectionFromMetadataXml"],n=>eK(or,n)(),n);oo.fetcher=(n,e)=>eK(or,n,e);let oa="\n    mutation updateConnection($input: UpdateConnectionInput!) {\n  updateConnection(input: $input) {\n    __typename\n    ... on ConnectionUpdated {\n      connection {\n        id\n        state\n        name\n        type\n        oidc_client_id\n        oidc_client_secret\n        oidc_discovery_endpoint\n        saml_acs_url\n        saml_entity_id\n        saml_idp_url\n        samlX509Certificates {\n          id\n          value\n        }\n      }\n    }\n    ... on ConnectionNotFound {\n      connectionId\n    }\n  }\n}\n    ",ou=n=>(0,ez.useMutation)(["updateConnection"],n=>eK(oa,n)(),n);ou.fetcher=(n,e)=>eK(oa,n,e);let od="\n    mutation updateDirectoryAttributeMap($directory_attribute_map_id: String!, $emails_attribute: String, $external_id_attribute: String, $first_name_attribute: String, $group_name_attribute: String, $last_name_attribute: String, $job_title_attribute: String, $username_attribute: String) {\n  updateDirectoryAttributeMap(\n    directory_attribute_map_id: $directory_attribute_map_id\n    emails_attribute: $emails_attribute\n    external_id_attribute: $external_id_attribute\n    first_name_attribute: $first_name_attribute\n    group_name_attribute: $group_name_attribute\n    last_name_attribute: $last_name_attribute\n    job_title_attribute: $job_title_attribute\n    username_attribute: $username_attribute\n  ) {\n    ...DirectoryAttributeMap\n  }\n}\n    ".concat(e6),os=n=>(0,ez.useMutation)(["updateDirectoryAttributeMap"],n=>eK(od,n)(),n);os.fetcher=(n,e)=>eK(od,n,e);let oc="\n    mutation UpdateDirectoryConfig($input: UpdateDirectoryConfigInput!) {\n  updateDirectoryConfigDashboard(input: $input) {\n    ...DirectoryConfig\n  }\n}\n    ".concat(e4),ol=n=>(0,ez.useMutation)(["UpdateDirectoryConfig"],n=>eK(oc,n)(),n);ol.fetcher=(n,e)=>eK(oc,n,e);let om="\n    mutation updateDirectory($input: UpdateDirectoryInput!) {\n  updateDirectory(input: $input) {\n    __typename\n    ... on DirectoryUpdated {\n      directory {\n        ...Directory\n      }\n    }\n    ... on DirectoryNotFound {\n      directoryId\n    }\n    ... on DirectoryProviderErrors {\n      errors {\n        message\n      }\n    }\n    ... on InvalidSshKey {\n      message\n    }\n  }\n}\n    ".concat(e8),op=n=>(0,ez.useMutation)(["updateDirectory"],n=>eK(om,n)(),n);op.fetcher=(n,e)=>eK(om,n,e);let og="\n    mutation updateJitProvisioningConfiguration($organizationId: ID!, $isSsoJitProvisioningEnabled: Boolean, $isDomainJitProvisioningEnabled: Boolean) {\n  updateOrganization(\n    id: $organizationId\n    isSsoJitProvisioningEnabled: $isSsoJitProvisioningEnabled\n    isDomainJitProvisioningEnabled: $isDomainJitProvisioningEnabled\n  ) {\n    organization {\n      __typename\n    }\n  }\n}\n    ",oy=n=>(0,ez.useMutation)(["updateJitProvisioningConfiguration"],n=>eK(og,n)(),n);oy.fetcher=(n,e)=>eK(og,n,e);let of="\n    mutation changeRole($usersOrganizationsId: String!, $role: UsersOrganizationsRole!) {\n  changeRole(usersOrganizationsId: $usersOrganizationsId, role: $role) {\n    id\n    role\n  }\n}\n    ",oS=n=>(0,ez.useMutation)(["changeRole"],n=>eK(of,n)(),n);oS.fetcher=(n,e)=>eK(of,n,e);let oh="\n    mutation updateMyself($input: UpdateMyselfInput!) {\n  updateMyself(input: $input) {\n    __typename\n    ... on MyselfUpdated {\n      me {\n        ...AuthedUser\n      }\n    }\n  }\n}\n    ".concat(eW),o$=n=>(0,ez.useMutation)(["updateMyself"],n=>eK(oh,n)(),n);o$.fetcher=(n,e)=>eK(oh,n,e);let oI="\n    mutation updateOAuthCredential($id: String!, $client_secret: String, $client_id: String, $redirect_uri: String) {\n  updateOAuthCredential(\n    oauth_credential_id: $id\n    client_secret: $client_secret\n    client_id: $client_id\n    redirect_uri: $redirect_uri\n  ) {\n    id\n    state\n    redirectUri\n    clientId\n    clientSecret\n  }\n}\n    ",o_=n=>(0,ez.useMutation)(["updateOAuthCredential"],n=>eK(oI,n)(),n);o_.fetcher=(n,e)=>eK(oI,n,e);let oC="\n    mutation updateOAuthCredentials($input: UpdateOauthCredentialsInput!) {\n  updateOauthCredentials(input: $input) {\n    __typename\n    ... on OauthCredentialsUpdated {\n      credentials {\n        id\n        state\n        redirectUri\n        clientId\n        clientSecret\n      }\n    }\n    ... on OauthCredentialsNotFound {\n      environmentId\n    }\n    ... on InvalidOauthCredentials {\n      errors {\n        field\n        message\n      }\n    }\n  }\n}\n    ",ob=n=>(0,ez.useMutation)(["updateOAuthCredentials"],n=>eK(oC,n)(),n);ob.fetcher=(n,e)=>eK(oC,n,e);let oD="\n    mutation updateOrganizationUserlandSettings($organizationId: ID!, $isGithubOauthEnabled: Boolean, $isGoogleOauthEnabled: Boolean, $isMagicAuthEnabled: Boolean, $isMicrosoftOauthEnabled: Boolean, $isPasswordAuthEnabled: Boolean, $domainMfaRequired: Boolean, $nonDomainSsoRequired: Boolean, $nonDomainMfaRequired: Boolean) {\n  updateOrganization(\n    id: $organizationId\n    isGithubOauthEnabled: $isGithubOauthEnabled\n    isGoogleOauthEnabled: $isGoogleOauthEnabled\n    isMicrosoftOauthEnabled: $isMicrosoftOauthEnabled\n    isMagicAuthEnabled: $isMagicAuthEnabled\n    isPasswordAuthEnabled: $isPasswordAuthEnabled\n    domainMfaRequired: $domainMfaRequired\n    nonDomainSsoRequired: $nonDomainSsoRequired\n    nonDomainMfaRequired: $nonDomainMfaRequired\n  ) {\n    organization {\n      __typename\n    }\n  }\n}\n    ",ov=n=>(0,ez.useMutation)(["updateOrganizationUserlandSettings"],n=>eK(oD,n)(),n);ov.fetcher=(n,e)=>eK(oD,n,e);let oA="\n    mutation updateOrganization($id: ID!, $name: String!, $domains: [String!], $domainsDeveloperVerified: Boolean, $allowProfilesOutsideOrganization: Boolean) {\n  updateOrganization(\n    id: $id\n    name: $name\n    domains: $domains\n    domainsDeveloperVerified: $domainsDeveloperVerified\n    allowProfilesOutsideOrganization: $allowProfilesOutsideOrganization\n  ) {\n    organization {\n      id\n      name\n      domains {\n        id\n        domain\n        state\n      }\n    }\n  }\n}\n    ",oU=n=>(0,ez.useMutation)(["updateOrganization"],n=>eK(oA,n)(),n);oU.fetcher=(n,e)=>eK(oA,n,e);let oM="\n    mutation updatePortalSettingsV2($input: UpdatePortalSettingsInput!) {\n  updatePortalSettingsV2(input: $input) {\n    __typename\n    ... on PortalSettingsUpdated {\n      portalSettings {\n        ...PortalSettings\n      }\n    }\n    ... on InvalidRedirectUri {\n      validationError\n      invalidFields\n    }\n  }\n}\n    ".concat(ta),oE=n=>(0,ez.useMutation)(["updatePortalSettingsV2"],n=>eK(oM,n)(),n);oE.fetcher=(n,e)=>eK(oM,n,e);let oL="\n    mutation updateRoleConfig($input: UpdateRoleConfigInput!) {\n  updateRoleConfig(input: $input) {\n    __typename\n    ... on RoleConfigNotFound {\n      __typename\n      roleConfigId\n    }\n    ... on RoleConfigUpdated {\n      __typename\n      roleConfig {\n        ...RoleConfig\n      }\n    }\n  }\n}\n    ".concat(tl),oO=n=>(0,ez.useMutation)(["updateRoleConfig"],n=>eK(oL,n)(),n);oO.fetcher=(n,e)=>eK(oL,n,e);let oz="\n    mutation updateRole($input: UpdateRoleInput!) {\n  updateRole(input: $input) {\n    __typename\n    ... on RoleNotFound {\n      __typename\n      roleId\n    }\n    ... on RoleUpdated {\n      __typename\n      role {\n        ...Role\n      }\n    }\n  }\n}\n    ".concat(tm),ok=n=>(0,ez.useMutation)(["updateRole"],n=>eK(oz,n)(),n);ok.fetcher=(n,e)=>eK(oz,n,e);let oR="\n    mutation updateSession($currentEnvironmentId: String, $currentProjectID: String) {\n  updateSession(\n    session: {currentEnvironmentId: $currentEnvironmentId, currentProjectID: $currentProjectID}\n  ) {\n    currentEnvironment {\n      ...EnvironmentWithProjectV2\n    }\n  }\n}\n    ".concat(tn),oP=n=>(0,ez.useMutation)(["updateSession"],n=>eK(oR,n)(),n);oP.fetcher=(n,e)=>eK(oR,n,e);let oT="\n    mutation updateTeamDetails($input: UpdateTeamDetailsInput!) {\n  updateTeamDetails(input: $input) {\n    __typename\n    ... on TeamDetailsUpdated {\n      team {\n        ...CurrentTeam\n      }\n    }\n    ... on InvalidTeamName {\n      team {\n        id\n      }\n    }\n  }\n}\n    ".concat(e0),oF=n=>(0,ez.useMutation)(["updateTeamDetails"],n=>eK(oT,n)(),n);oF.fetcher=(n,e)=>eK(oT,n,e);let oN="\n    mutation updateTeamMfaRequirement($input: UpdateTeamMfaRequirementInput!) {\n  updateTeamMfaRequirement(input: $input) {\n    __typename\n    ... on TeamMfaRequirementUpdated {\n      team {\n        ...CurrentTeam\n      }\n    }\n  }\n}\n    ".concat(e0),oK=n=>(0,ez.useMutation)(["updateTeamMfaRequirement"],n=>eK(oN,n)(),n);oK.fetcher=(n,e)=>eK(oN,n,e);let oV="\n    mutation updateUserlandImpersonationSettings($input: UpdateUserlandImpersonationSettingsInput!) {\n  updateUserlandImpersonationSettings(input: $input) {\n    __typename\n  }\n}\n    ",oq=n=>(0,ez.useMutation)(["updateUserlandImpersonationSettings"],n=>eK(oV,n)(),n);oq.fetcher=(n,e)=>eK(oV,n,e);let oG="\n    mutation updateUserlandSettings($input: UpdateUserlandSettingsInput!) {\n  updateUserlandSettings(input: $input) {\n    __typename\n  }\n}\n    ",oB=n=>(0,ez.useMutation)(["updateUserlandSettings"],n=>eK(oG,n)(),n);oB.fetcher=(n,e)=>eK(oG,n,e);let ow="\n    mutation updateRoleOnOrganizationMembership($input: UpdateRoleOnOrganizationMembershipInput!) {\n  updateRoleOnOrganizationMembership(input: $input) {\n    __typename\n    ... on RoleNotFound {\n      __typename\n      roleId\n    }\n    ... on UserlandUserOrganizationMembershipNotFound {\n      __typename\n      message\n    }\n    ... on RoleOnOrganizationMembershipUpdated {\n      __typename\n      organizationMembership {\n        ...UserlandUserOrganizationMembership\n      }\n    }\n  }\n}\n    ".concat(tS),ox=n=>(0,ez.useMutation)(["updateRoleOnOrganizationMembership"],n=>eK(ow,n)(),n);ox.fetcher=(n,e)=>eK(ow,n,e);let oQ="\n    mutation updateUserlandUser($input: UpdateUserlandUserInput!) {\n  updateUserlandUser(input: $input) {\n    __typename\n    ... on UserlandUserNotFound {\n      __typename\n    }\n    ... on UserlandUserUpdated {\n      userlandUser {\n        id\n      }\n    }\n  }\n}\n    ",oW=n=>(0,ez.useMutation)(["updateUserlandUser"],n=>eK(oQ,n)(),n);oW.fetcher=(n,e)=>eK(oQ,n,e);let oH="\n    mutation updateWebhookEndpoint($webhookEndpointId: String!, $endpointUrl: String, $state: WebhookEndpointState, $events: [String!]) {\n  updateWebhookEndpoint(\n    webhookEndpointId: $webhookEndpointId\n    endpointUrl: $endpointUrl\n    state: $state\n    events: $events\n  ) {\n    id\n  }\n}\n    ",oJ=n=>(0,ez.useMutation)(["updateWebhookEndpoint"],n=>eK(oH,n)(),n);oJ.fetcher=(n,e)=>eK(oH,n,e);let oX="\n    mutation upsertAuth0Credential($input: UpsertAuth0CredentialInput!) {\n  upsertAuth0Credential(input: $input) {\n    __typename\n    ... on Auth0CredentialInvalid {\n      message\n    }\n    ... on Auth0CredentialUpdated {\n      auth0Credential {\n        ...Auth0Credential\n      }\n    }\n  }\n}\n    ".concat(ex),oj=n=>(0,ez.useMutation)(["upsertAuth0Credential"],n=>eK(oX,n)(),n);oj.fetcher=(n,e)=>eK(oX,n,e);let oY="\n    mutation verifyAuthenticationFactorEnrollment($input: VerifyAuthenticationFactorEnrollmentInput!) {\n  verifyAuthenticationFactorEnrollment(input: $input) {\n    __typename\n    ... on UserAuthenticationFactorVerified {\n      valid\n    }\n  }\n}\n    ",oZ=n=>(0,ez.useMutation)(["verifyAuthenticationFactorEnrollment"],n=>eK(oY,n)(),n);oZ.fetcher=(n,e)=>eK(oY,n,e);let o0="\n    mutation verifyDomainStatus($input: VerifyDomainStatusInput!) {\n  verifyDomainStatus(input: $input) {\n    __typename\n    ... on DomainStatusChecked {\n      success\n    }\n  }\n}\n    ",o2=n=>(0,ez.useMutation)(["verifyDomainStatus"],n=>eK(o0,n)(),n);o2.fetcher=(n,e)=>eK(o0,n,e);let o5="\n    mutation verifyCustomEmailDomain {\n  verifyCustomEmailDomain {\n    ... on VerificationResult {\n      customEmailDomain {\n        ...CustomEmailDomain\n      }\n    }\n  }\n}\n    ".concat(e5),o9=n=>(0,ez.useMutation)(["verifyCustomEmailDomain"],n=>eK(o5,n)(),n);o9.fetcher=(n,e)=>eK(o5,n,e);let o3="\n    mutation verifyRedirectUri($input: VerifyRedirectUriInput!) {\n  verifyRedirectUri(input: $input) {\n    __typename\n    ... on RedirectUriChecked {\n      success\n    }\n  }\n}\n    ",o1=n=>(0,ez.useMutation)(["verifyRedirectUri"],n=>eK(o3,n)(),n);o1.fetcher=(n,e)=>eK(o3,n,e);let o7="\n    query activationMilestones($environmentId: String!) {\n  environment(id: $environmentId) {\n    activationMilestones {\n      id\n      name\n      createdAt\n    }\n  }\n}\n    ",o4=(n,e)=>(0,ek.useQuery)(["activationMilestones",n],eK(o7,n),e);o4.getKey=n=>["activationMilestones",n],o4.fetcher=(n,e)=>eK(o7,n,e);let o6="\n    query activePortalSetupLinks($organizationId: String!) {\n  activePortalSetupLinks(organizationId: $organizationId) {\n    data {\n      ...PortalSetupLink\n    }\n  }\n}\n    ".concat(tu),o8=(n,e)=>(0,ek.useQuery)(["activePortalSetupLinks",n],eK(o6,n),e);o8.getKey=n=>["activePortalSetupLinks",n],o8.fetcher=(n,e)=>eK(o6,n,e);let an="\n    query apiKeys($environmentId: String!) {\n  activeKeys: keys(environmentId: $environmentId, scope: Active) {\n    data {\n      ...Key\n    }\n  }\n  expiredKeys: keys(environmentId: $environmentId, scope: RecentlyExpired) {\n    data {\n      ...Key\n    }\n  }\n}\n    ".concat(te),ae=(n,e)=>(0,ek.useQuery)(["apiKeys",n],eK(an,n),e);ae.getKey=n=>["apiKeys",n],ae.fetcher=(n,e)=>eK(an,n,e);let at="\n    query appBranding {\n  currentTeam {\n    projects: projectsV2 {\n      appBranding {\n        ...AppBranding\n      }\n    }\n  }\n}\n    ".concat(eV),ai=(n,e)=>(0,ek.useQuery)(void 0===n?["appBranding"]:["appBranding",n],eK(at,n),e);ai.getKey=n=>void 0===n?["appBranding"]:["appBranding",n],ai.fetcher=(n,e)=>eK(at,n,e);let ar="\n    query auditLogEvent($id: String!) {\n  auditLogEvent(id: $id) {\n    data\n    ...AuditLogEvent\n  }\n}\n    ".concat(eq),ao=(n,e)=>(0,ek.useQuery)(["auditLogEvent",n],eK(ar,n),e);ao.getKey=n=>["auditLogEvent",n],ao.fetcher=(n,e)=>eK(ar,n,e);let aa="\n    query auditLogEvents($after: String, $before: String, $organizationId: String!, $limit: Int, $actions: [String!], $actorNames: [String!], $actorIds: [String!], $targets: [String!], $targetIds: [String!], $startDate: DateTime, $endDate: DateTime) {\n  auditLogEvents(\n    after: $after\n    before: $before\n    organizationId: $organizationId\n    limit: $limit\n    actions: $actions\n    actors: $actorNames\n    actorIds: $actorIds\n    targets: $targets\n    targetIds: $targetIds\n    startDate: $startDate\n    endDate: $endDate\n  ) {\n    data {\n      ...AuditLogEvent\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(eq),au=(n,e)=>(0,ek.useQuery)(["auditLogEvents",n],eK(aa,n),e);au.getKey=n=>["auditLogEvents",n],au.fetcher=(n,e)=>eK(aa,n,e);let ad="\n    query auditLogExport($id: String!) {\n  auditLogExport(id: $id) {\n    id\n    state\n    url\n  }\n}\n    ",as=(n,e)=>(0,ek.useQuery)(["auditLogExport",n],eK(ad,n),e);as.getKey=n=>["auditLogExport",n],as.fetcher=(n,e)=>eK(ad,n,e);let ac="\n    query auditLogRetentionPeriod($organizationId: String!) {\n  organization(id: $organizationId) {\n    auditLogTrail {\n      retentionPeriodInDays\n    }\n  }\n}\n    ",al=(n,e)=>(0,ek.useQuery)(["auditLogRetentionPeriod",n],eK(ac,n),e);al.getKey=n=>["auditLogRetentionPeriod",n],al.fetcher=(n,e)=>eK(ac,n,e);let am="\n    query auditLogSchemaEditor($id: String!, $environmentId: String!, $limit: Int = 100) {\n  event: auditLogValidator(id: $id) {\n    ...AuditLogValidator\n  }\n  targets: auditLogTargets(limit: $limit, environmentId: $environmentId) {\n    data {\n      ...AuditLogTarget\n    }\n  }\n}\n    ".concat(ew,"\n").concat(eB),ap=(n,e)=>(0,ek.useQuery)(["auditLogSchemaEditor",n],eK(am,n),e);ap.getKey=n=>["auditLogSchemaEditor",n],ap.fetcher=(n,e)=>eK(am,n,e);let ag="\n    query auditLogSchemaPreview($action: String!, $targets: [String!]!, $environmentId: String!, $schema: JSON) {\n  auditLogSchemaPreview(\n    action: $action\n    targets: $targets\n    environmentId: $environmentId\n    schema: $schema\n  ) {\n    schema\n  }\n}\n    ",ay=(n,e)=>(0,ek.useQuery)(["auditLogSchemaPreview",n],eK(ag,n),e);ay.getKey=n=>["auditLogSchemaPreview",n],ay.fetcher=(n,e)=>eK(ag,n,e);let af="\n    query auditLogStream($id: String!) {\n  auditLogStream(id: $id) {\n    ...AuditLogStream\n    organization {\n      id\n      name\n    }\n  }\n}\n    ".concat(eG),aS=(n,e)=>(0,ek.useQuery)(["auditLogStream",n],eK(af,n),e);aS.getKey=n=>["auditLogStream",n],aS.fetcher=(n,e)=>eK(af,n,e);let ah="\n    query auditLogTargets($after: String, $before: String, $limit: Int, $target: String, $environmentId: String!) {\n  auditLogTargets(\n    after: $after\n    before: $before\n    limit: $limit\n    target: $target\n    environmentId: $environmentId\n  ) {\n    data {\n      ...AuditLogTarget\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(eB),a$=(n,e)=>(0,ek.useQuery)(["auditLogTargets",n],eK(ah,n),e);a$.getKey=n=>["auditLogTargets",n],a$.fetcher=(n,e)=>eK(ah,n,e);let aI="\n    query auditLogValidator($id: String!) {\n  auditLogValidator(id: $id) {\n    ...AuditLogValidator\n  }\n}\n    ".concat(ew),a_=(n,e)=>(0,ek.useQuery)(["auditLogValidator",n],eK(aI,n),e);a_.getKey=n=>["auditLogValidator",n],a_.fetcher=(n,e)=>eK(aI,n,e);let aC="\n    query auditLogValidators($after: String, $before: String, $limit: Int, $action: String, $environmentId: String!) {\n  auditLogValidators(\n    after: $after\n    before: $before\n    limit: $limit\n    action: $action\n    environmentId: $environmentId\n  ) {\n    data {\n      ...AuditLogValidator\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(ew),ab=(n,e)=>(0,ek.useQuery)(["auditLogValidators",n],eK(aC,n),e);ab.getKey=n=>["auditLogValidators",n],ab.fetcher=(n,e)=>eK(aC,n,e);let aD="\n    query auth0Credential($environmentId: String!) {\n  environment(id: $environmentId) {\n    auth0Credential {\n      ...Auth0Credential\n    }\n  }\n}\n    ".concat(ex),av=(n,e)=>(0,ek.useQuery)(["auth0Credential",n],eK(aD,n),e);av.getKey=n=>["auth0Credential",n],av.fetcher=(n,e)=>eK(aD,n,e);let aA="\n    query userAuthenticationFactors {\n  userAuthenticationFactors {\n    __typename\n    data {\n      id\n      type\n    }\n  }\n}\n    ",aU=(n,e)=>(0,ek.useQuery)(void 0===n?["userAuthenticationFactors"]:["userAuthenticationFactors",n],eK(aA,n),e);aU.getKey=n=>void 0===n?["userAuthenticationFactors"]:["userAuthenticationFactors",n],aU.fetcher=(n,e)=>eK(aA,n,e);let aM="\n    query autoMappedDirectoryCustomAttributes($environmentId: String!) {\n  autoMappedDirectoryCustomAttributes(environmentId: $environmentId) {\n    ...AutoMappedDirectoryCustomAttribute\n  }\n}\n    ".concat("\n    fragment AutoMappedDirectoryCustomAttribute on AutoMappedDirectoryCustomAttribute {\n  name\n  attributeKey\n  description\n  isActive\n}\n    "),aE=(n,e)=>(0,ek.useQuery)(["autoMappedDirectoryCustomAttributes",n],eK(aM,n),e);aE.getKey=n=>["autoMappedDirectoryCustomAttributes",n],aE.fetcher=(n,e)=>eK(aM,n,e);let aL="\n    query ConnectionSession($id: String!) {\n  connectionSession(id: $id) {\n    ...ConnectionSessionData\n  }\n}\n    ".concat(eX),aO=(n,e)=>(0,ek.useQuery)(["ConnectionSession",n],eK(aL,n),e);aO.getKey=n=>["ConnectionSession",n],aO.fetcher=(n,e)=>eK(aL,n,e);let az="\n    query connection($id: String!) {\n  connection(id: $id) {\n    __typename\n    ... on Connection {\n      ...Connection\n    }\n    ... on UntypedConnection {\n      ...UntypedConnection\n    }\n  }\n}\n    ".concat(eZ,"\n").concat("\n    fragment UntypedConnection on UntypedConnection {\n  __typename\n  id\n  name\n  organization {\n    id\n    name\n  }\n}\n    "),ak=(n,e)=>(0,ek.useQuery)(["connection",n],eK(az,n),e);ak.getKey=n=>["connection",n],ak.fetcher=(n,e)=>eK(az,n,e);let aR="\n    query connectionsByType($environmentId: String!, $type: ConnectionType!) {\n  oauthCredentialsByType(environmentId: $environmentId, type: $type) {\n    data {\n      ...OAuthCredential\n    }\n  }\n}\n    ".concat(ti),aP=(n,e)=>(0,ek.useQuery)(["connectionsByType",n],eK(aR,n),e);aP.getKey=n=>["connectionsByType",n],aP.fetcher=(n,e)=>eK(aR,n,e);let aT="\n    query connectionsForOrganization($before: String, $after: String, $limit: Int, $search: String, $organizationId: String!, $state: ConnectionState, $connectionType: ConnectionType) {\n  organization(id: $organizationId) {\n    connections(\n      before: $before\n      after: $after\n      limit: $limit\n      search: $search\n      state: $state\n      type: $connectionType\n    ) {\n      data {\n        ...Connection\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat(eZ),aF=(n,e)=>(0,ek.useQuery)(["connectionsForOrganization",n],eK(aT,n),e);aF.getKey=n=>["connectionsForOrganization",n],aF.fetcher=(n,e)=>eK(aT,n,e);let aN="\n    query customDomain($environmentId: String!, $type: CustomDomainType!) {\n  customDomain(environmentId: $environmentId, type: $type) {\n    ...CustomDomain\n  }\n}\n    ".concat(e2),aK=(n,e)=>(0,ek.useQuery)(["customDomain",n],eK(aN,n),e);aK.getKey=n=>["customDomain",n],aK.fetcher=(n,e)=>eK(aN,n,e);let aV="\n    query customEmailDomain {\n  customEmailDomain {\n    customEmailDomain {\n      ...CustomEmailDomain\n    }\n    defaultAdminPortalEmailDomain\n    sandboxUserlandEmailDomainEmailDomain\n    defaultProductionEmailDomain\n    defaultSandboxEmailDomain\n  }\n}\n    ".concat(e5),aq=(n,e)=>(0,ek.useQuery)(void 0===n?["customEmailDomain"]:["customEmailDomain",n],eK(aV,n),e);aq.getKey=n=>void 0===n?["customEmailDomain"]:["customEmailDomain",n],aq.fetcher=(n,e)=>eK(aV,n,e);let aG="\n    query dashboardOrganizations($after: String, $before: String, $connectionState: OrganizationConnectionState, $connectionType: ConnectionType, $directoryState: OrganizationDirectoryState, $auditLogStreamType: AuditLogStreamType, $auditLogStreamState: AuditLogStreamState, $directoryType: DirectoryType, $environmentId: String!, $limit: Int = 10, $rangeEnd: DateTime, $rangeStart: DateTime, $search: String, $usersCountMaximum: Int, $usersCountMinimum: Int) {\n  organizations(\n    after: $after\n    before: $before\n    connectionState: $connectionState\n    connectionType: $connectionType\n    directoryState: $directoryState\n    directoryType: $directoryType\n    auditLogStreamType: $auditLogStreamType\n    auditLogStreamState: $auditLogStreamState\n    environmentId: $environmentId\n    limit: $limit\n    rangeEnd: $rangeEnd\n    rangeStart: $rangeStart\n    search: $search\n    usersCountMaximum: $usersCountMaximum\n    usersCountMinimum: $usersCountMinimum\n  ) {\n    data {\n      ...DashboardOrganization\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(e3),aB=(n,e)=>(0,ek.useQuery)(["dashboardOrganizations",n],eK(aG,n),e);aB.getKey=n=>["dashboardOrganizations",n],aB.fetcher=(n,e)=>eK(aG,n,e);let aw="\n    query dashboardSession {\n  currentEnvironment {\n    ...EnvironmentWithProjectV2\n  }\n  me {\n    ...AuthedUser\n  }\n  currentTeam {\n    ...CurrentTeam\n  }\n}\n    ".concat(tn,"\n").concat(eW,"\n").concat(e0),ax=(n,e)=>(0,ek.useQuery)(void 0===n?["dashboardSession"]:["dashboardSession",n],eK(aw,n),e);ax.getKey=n=>void 0===n?["dashboardSession"]:["dashboardSession",n],ax.fetcher=(n,e)=>eK(aw,n,e);let aQ="\n    query getDatadogActivityStream($environmentId: String!) {\n  datadogWebhookEndpoint(environmentId: $environmentId) {\n    id\n    region\n    apiKey\n    healthy\n  }\n}\n    ",aW=(n,e)=>(0,ek.useQuery)(["getDatadogActivityStream",n],eK(aQ,n),e);aW.getKey=n=>["getDatadogActivityStream",n],aW.fetcher=(n,e)=>eK(aQ,n,e);let aH="\n    query defaultRedirectUri($environmentId: String!) {\n  defaultRedirectUri(environmentId: $environmentId) {\n    ...RedirectUri\n  }\n}\n    ".concat(ts),aJ=(n,e)=>(0,ek.useQuery)(["defaultRedirectUri",n],eK(aH,n),e);aJ.getKey=n=>["defaultRedirectUri",n],aJ.fetcher=(n,e)=>eK(aH,n,e);let aX="\n    query directoriesForOrganization($organizationId: String!, $before: String, $after: String, $limit: Int, $search: String) {\n  organization(id: $organizationId) {\n    directories(before: $before, after: $after, limit: $limit, search: $search) {\n      data {\n        __typename\n        ... on Directory {\n          id\n          type\n          name\n          state\n          createdAt\n        }\n        ... on UntypedDirectory {\n          ...UntypedDirectory\n        }\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat(t$),aj=(n,e)=>(0,ek.useQuery)(["directoriesForOrganization",n],eK(aX,n),e);aj.getKey=n=>["directoriesForOrganization",n],aj.fetcher=(n,e)=>eK(aX,n,e);let aY="\n    query directoryCustomAttributeMappings($directoryId: String!) {\n  directoryCustomAttributeMappings(directoryId: $directoryId) {\n    data {\n      ...DirectoryCustomAttributeMappings\n    }\n  }\n}\n    ".concat("\n    fragment DirectoryCustomAttributeMappings on DirectoryCustomAttributeMapping {\n  id\n  attribute\n  customAttribute {\n    name\n  }\n  directory {\n    id\n  }\n}\n    "),aZ=(n,e)=>(0,ek.useQuery)(["directoryCustomAttributeMappings",n],eK(aY,n),e);aZ.getKey=n=>["directoryCustomAttributeMappings",n],aZ.fetcher=(n,e)=>eK(aY,n,e);let a0="\n    query directoryCustomAttributes($environmentId: String!) {\n  directoryCustomAttributes(environmentId: $environmentId) {\n    data {\n      ...DirectoryCustomAttribute\n    }\n  }\n}\n    ".concat("\n    fragment DirectoryCustomAttribute on DirectoryCustomAttribute {\n  id\n  isRequired\n  name\n}\n    "),a2=(n,e)=>(0,ek.useQuery)(["directoryCustomAttributes",n],eK(a0,n),e);a2.getKey=n=>["directoryCustomAttributes",n],a2.fetcher=(n,e)=>eK(a0,n,e);let a5="\n    query directoryEvents($directoryId: String!, $directoryGroupId: String, $directoryUserId: String, $rangeStart: DateTime, $rangeEnd: DateTime, $names: [String!], $search: String, $before: String, $after: String, $limit: Int) {\n  directory(id: $directoryId) {\n    __typename\n    ... on Directory {\n      events(\n        directoryGroupId: $directoryGroupId\n        directoryUserId: $directoryUserId\n        rangeStart: $rangeStart\n        rangeEnd: $rangeEnd\n        names: $names\n        search: $search\n        before: $before\n        after: $after\n        limit: $limit\n      ) {\n        data {\n          id\n          name\n          data\n          createdAt\n          updatedAt\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ",a9=(n,e)=>(0,ek.useQuery)(["directoryEvents",n],eK(a5,n),e);a9.getKey=n=>["directoryEvents",n],a9.fetcher=(n,e)=>eK(a5,n,e);let a3="\n    query DirectoryGroupConfigsSummaryDashboard($directoryId: String!) {\n  directoryGroupConfigsSummaryDashboard(id: $directoryId) {\n    numberOfGroupsInDirectory\n    numberOfSyncingGroupsInDirectory\n  }\n}\n    ",a1=(n,e)=>(0,ek.useQuery)(["DirectoryGroupConfigsSummaryDashboard",n],eK(a3,n),e);a1.getKey=n=>["DirectoryGroupConfigsSummaryDashboard",n],a1.fetcher=(n,e)=>eK(a3,n,e);let a7="\n    query DirectoryGroupConfigs($directoryId: String!, $after: String, $before: String, $limit: Int) {\n  directory(id: $directoryId) {\n    __typename\n    ... on Directory {\n      directoryGroupConfigs(before: $before, after: $after, limit: $limit) {\n        data {\n          ...DirectoryGroupConfig\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ".concat(e1),a4=(n,e)=>(0,ek.useQuery)(["DirectoryGroupConfigs",n],eK(a7,n),e);a4.getKey=n=>["DirectoryGroupConfigs",n],a4.fetcher=(n,e)=>eK(a7,n,e);let a6="\n    query directoryGroups($directoryId: String!, $before: String, $after: String, $limit: Int, $search: String) {\n  directory(id: $directoryId) {\n    __typename\n    ... on Directory {\n      directoryGroups(before: $before, after: $after, limit: $limit, search: $search) {\n        data {\n          ...DirectoryGroup\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ".concat("\n    fragment DirectoryGroup on DirectoryGroup {\n  id\n  name\n  summary {\n    memberCount\n  }\n}\n    "),a8=(n,e)=>(0,ek.useQuery)(["directoryGroups",n],eK(a6,n),e);a8.getKey=n=>["directoryGroups",n],a8.fetcher=(n,e)=>eK(a6,n,e);let un="\n    query directorySummary($directoryId: String!, $limit: Int = 1, $state: DirectorySyncRunState) {\n  directory(id: $directoryId) {\n    __typename\n    ... on Directory {\n      ...DirectorySummary\n    }\n  }\n}\n    ".concat("\n    fragment DirectorySummary on Directory {\n  __typename\n  state\n  directorySyncRuns(limit: $limit, state: $state) {\n    data {\n      ...DirectorySyncRun\n    }\n  }\n  summary {\n    userCount\n    groupCount\n  }\n}\n    ".concat("\n    fragment DirectorySyncRun on DirectorySyncRun {\n  id\n  state\n  updatedAt\n  errors {\n    __typename\n    ... on MalformedDirectoryUserError {\n      code\n      reason\n    }\n    ... on MalformedDirectoryGroupError {\n      code\n      reason\n    }\n  }\n}\n    ")),ue=(n,e)=>(0,ek.useQuery)(["directorySummary",n],eK(un,n),e);ue.getKey=n=>["directorySummary",n],ue.fetcher=(n,e)=>eK(un,n,e);let ut="\n    query directoryUser($id: String!) {\n  directoryUser(id: $id) {\n    ...DirectoryUser\n    json\n  }\n}\n    ".concat(e7),ui=(n,e)=>(0,ek.useQuery)(["directoryUser",n],eK(ut,n),e);ui.getKey=n=>["directoryUser",n],ui.fetcher=(n,e)=>eK(ut,n,e);let ur="\n    query directoryUsers($directoryId: String!, $before: String, $after: String, $limit: Int, $search: String) {\n  directory(id: $directoryId) {\n    __typename\n    ... on Directory {\n      directoryUsers(before: $before, after: $after, limit: $limit, search: $search) {\n        data {\n          ...DirectoryUser\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ".concat(e7),uo=(n,e)=>(0,ek.useQuery)(["directoryUsers",n],eK(ur,n),e);uo.getKey=n=>["directoryUsers",n],uo.fetcher=(n,e)=>eK(ur,n,e);let ua="\n    query directory($id: String!) {\n  directory(id: $id) {\n    __typename\n    ... on Directory {\n      ...Directory\n    }\n    ... on UntypedDirectory {\n      ...UntypedDirectory\n    }\n  }\n}\n    ".concat(e8,"\n").concat(t$),uu=(n,e)=>(0,ek.useQuery)(["directory",n],eK(ua,n),e);uu.getKey=n=>["directory",n],uu.fetcher=(n,e)=>eK(ua,n,e);let ud="\n    query emailNotificationPreferences {\n  emailNotificationPreferences {\n    preferences {\n      category\n      preference\n    }\n  }\n}\n    ",us=(n,e)=>(0,ek.useQuery)(void 0===n?["emailNotificationPreferences"]:["emailNotificationPreferences",n],eK(ud,n),e);us.getKey=n=>void 0===n?["emailNotificationPreferences"]:["emailNotificationPreferences",n],us.fetcher=(n,e)=>eK(ud,n,e);let uc="\n    query environmentEvent($environmentId: String!, $eventId: String!) {\n  environment(id: $environmentId) {\n    event(id: $eventId) {\n      id\n      name\n      data\n      createdAt\n      updatedAt\n      metadata\n      webhooks {\n        data {\n          id\n          state\n          deliverAfter\n          attempt\n          event\n          metadata\n          webhookEndpointId\n        }\n      }\n    }\n  }\n}\n    ",ul=(n,e)=>(0,ek.useQuery)(["environmentEvent",n],eK(uc,n),e);ul.getKey=n=>["environmentEvent",n],ul.fetcher=(n,e)=>eK(uc,n,e);let um="\n    query environmentEvents($environmentId: String!, $names: [String!], $directoryId: String, $directoryGroupId: String, $directoryUserId: String, $userId: String, $rangeStart: DateTime, $rangeEnd: DateTime, $search: String, $before: String, $after: String, $limit: Int) {\n  environment(id: $environmentId) {\n    events(\n      directoryId: $directoryId\n      names: $names\n      directoryGroupId: $directoryGroupId\n      directoryUserId: $directoryUserId\n      userId: $userId\n      rangeStart: $rangeStart\n      rangeEnd: $rangeEnd\n      search: $search\n      before: $before\n      after: $after\n      limit: $limit\n    ) {\n      data {\n        id\n        name\n        data\n        createdAt\n        updatedAt\n        metadata\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ",up=(n,e)=>(0,ek.useQuery)(["environmentEvents",n],eK(um,n),e);up.getKey=n=>["environmentEvents",n],up.fetcher=(n,e)=>eK(um,n,e);let ug="\n    query gettingStarted($environmentId: String!) {\n  onboardingGuides(environmentId: $environmentId) {\n    sso {\n      ...OnboardingGuideStatus\n    }\n    dsync {\n      ...OnboardingGuideStatus\n    }\n    auditLogs {\n      ...OnboardingGuideStatus\n    }\n    userManagement {\n      ...OnboardingGuideStatus\n    }\n    userManagementProd {\n      ...OnboardingGuideStatus\n    }\n  }\n}\n    ".concat("\n    fragment OnboardingGuideStatus on OnboardingGuideStatus {\n  isDone\n  chartTotal\n  totalsByMonth\n}\n    "),uy=(n,e)=>(0,ek.useQuery)(["gettingStarted",n],eK(ug,n),e);uy.getKey=n=>["gettingStarted",n],uy.fetcher=(n,e)=>eK(ug,n,e);let uf="\n    query internalDirectoryGroups($internalDirectoryId: String!, $after: String, $before: String, $limit: Int, $search: String) {\n  internalDirectory(id: $internalDirectoryId) {\n    groups(after: $after, before: $before, limit: $limit, search: $search) {\n      data {\n        ...TeamInternalDirectoryGroup\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat(tg),uS=(n,e)=>(0,ek.useQuery)(["internalDirectoryGroups",n],eK(uf,n),e);uS.getKey=n=>["internalDirectoryGroups",n],uS.fetcher=(n,e)=>eK(uf,n,e);let uh="\n    query isMfaEligible {\n  isMfaEligible\n}\n    ",u$=(n,e)=>(0,ek.useQuery)(void 0===n?["isMfaEligible"]:["isMfaEligible",n],eK(uh,n),e);u$.getKey=n=>void 0===n?["isMfaEligible"]:["isMfaEligible",n],u$.fetcher=(n,e)=>eK(uh,n,e);let uI="\n    query isUsingConsumerDomain {\n  currentTeam {\n    isUsingConsumerDomain\n  }\n}\n    ",u_=(n,e)=>(0,ek.useQuery)(void 0===n?["isUsingConsumerDomain"]:["isUsingConsumerDomain",n],eK(uI,n),e);u_.getKey=n=>void 0===n?["isUsingConsumerDomain"]:["isUsingConsumerDomain",n],u_.fetcher=(n,e)=>eK(uI,n,e);let uC="\n    query jitProvisioningConfiguration($organizationId: String!) {\n  organization(id: $organizationId) {\n    isSsoJitProvisioningEnabled\n    isDomainJitProvisioningEnabled\n    domains {\n      ...OrganizationDomain\n    }\n  }\n}\n    ".concat(e9),ub=(n,e)=>(0,ek.useQuery)(["jitProvisioningConfiguration",n],eK(uC,n),e);ub.getKey=n=>["jitProvisioningConfiguration",n],ub.fetcher=(n,e)=>eK(uC,n,e);let uD="\n    query logStreamsForOrganization($organizationId: String!) {\n  organization(id: $organizationId) {\n    auditLogStream {\n      ...AuditLogStream\n    }\n  }\n}\n    ".concat(eG),uv=(n,e)=>(0,ek.useQuery)(["logStreamsForOrganization",n],eK(uD,n),e);uv.getKey=n=>["logStreamsForOrganization",n],uv.fetcher=(n,e)=>eK(uD,n,e);let uA="\n    query oidcJwtSigningKeyPairs($connectionId: String!) {\n  oidcJwtSigningKeyPair(connectionId: $connectionId) {\n    id\n    publicKeyCert\n    notAfter\n    notBefore\n    createdAt\n    updatedAt\n  }\n}\n    ",uU=(n,e)=>(0,ek.useQuery)(["oidcJwtSigningKeyPairs",n],eK(uA,n),e);uU.getKey=n=>["oidcJwtSigningKeyPairs",n],uU.fetcher=(n,e)=>eK(uA,n,e);let uM="\n    query oidcSessions($connectionId: String!, $before: String, $after: String, $search: String, $state: OidcSessionState, $limit: Int) {\n  connection(id: $connectionId) {\n    __typename\n    ... on Connection {\n      oidcSessions(\n        before: $before\n        after: $after\n        search: $search\n        state: $state\n        limit: $limit\n      ) {\n        data {\n          ...ConnectionSessionData\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ".concat(eX),uE=(n,e)=>(0,ek.useQuery)(["oidcSessions",n],eK(uM,n),e);uE.getKey=n=>["oidcSessions",n],uE.fetcher=(n,e)=>eK(uM,n,e);let uL="\n    query organizationAdmins($organizationId: String!) {\n  organizationAdmins(organizationId: $organizationId) {\n    ...OrganizationAdmin\n  }\n}\n    ".concat(tr),uO=(n,e)=>(0,ek.useQuery)(["organizationAdmins",n],eK(uL,n),e);uO.getKey=n=>["organizationAdmins",n],uO.fetcher=(n,e)=>eK(uL,n,e);let uz="\n    query organizationDomainByVerifiedDomain($domain: String!) {\n  organizationDomainByVerifiedDomain(domain: $domain) {\n    ...OrganizationDomain\n  }\n}\n    ".concat(e9),uk=(n,e)=>(0,ek.useQuery)(["organizationDomainByVerifiedDomain",n],eK(uz,n),e);uk.getKey=n=>["organizationDomainByVerifiedDomain",n],uk.fetcher=(n,e)=>eK(uz,n,e);let uR="\n    query organizationUserlandSettings($id: String!) {\n  organization(id: $id) {\n    isGithubOauthEnabled\n    isGoogleOauthEnabled\n    isMagicAuthEnabled\n    isMicrosoftOauthEnabled\n    isPasswordAuthEnabled\n    domainMfaRequired\n    nonDomainSsoRequired\n    nonDomainMfaRequired\n  }\n}\n    ",uP=(n,e)=>(0,ek.useQuery)(["organizationUserlandSettings",n],eK(uR,n),e);uP.getKey=n=>["organizationUserlandSettings",n],uP.fetcher=(n,e)=>eK(uR,n,e);let uT="\n    query organization($id: String!) {\n  organization(id: $id) {\n    ...Organization\n  }\n}\n    ".concat(to),uF=(n,e)=>(0,ek.useQuery)(["organization",n],eK(uT,n),e);uF.getKey=n=>["organization",n],uF.fetcher=(n,e)=>eK(uT,n,e);let uN="\n    query organizations($environmentId: String!, $before: String, $after: String, $limit: Int, $search: String) {\n  organizations(\n    environmentId: $environmentId\n    before: $before\n    after: $after\n    limit: $limit\n    search: $search\n  ) {\n    data {\n      ...Organization\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(to),uK=(n,e)=>(0,ek.useQuery)(["organizations",n],eK(uN,n),e);uK.getKey=n=>["organizations",n],uK.fetcher=(n,e)=>eK(uN,n,e);let uV="\n    query portalSettings($environmentId: String!) {\n  environment(id: $environmentId) {\n    portalSettings {\n      ...PortalSettings\n    }\n  }\n}\n    ".concat(ta),uq=(n,e)=>(0,ek.useQuery)(["portalSettings",n],eK(uV,n),e);uq.getKey=n=>["portalSettings",n],uq.fetcher=(n,e)=>eK(uV,n,e);let uG="\n    query portalSetupLinkEmailSentEvents($portalSetupLinkId: String!) {\n  portalSetupLinkEmailSentEvents(portalSetupLinkId: $portalSetupLinkId) {\n    id\n    portalSetupLinkId\n    action {\n      type\n      organizationAdminEmail\n    }\n  }\n}\n    ",uB=(n,e)=>(0,ek.useQuery)(["portalSetupLinkEmailSentEvents",n],eK(uG,n),e);uB.getKey=n=>["portalSetupLinkEmailSentEvents",n],uB.fetcher=(n,e)=>eK(uG,n,e);let uw="\n    query profileByEmail($input: ProfileByEmailInput!) {\n  profileByEmail(input: $input) {\n    ...Profile\n  }\n}\n    ".concat(td),ux=(n,e)=>(0,ek.useQuery)(["profileByEmail",n],eK(uw,n),e);ux.getKey=n=>["profileByEmail",n],ux.fetcher=(n,e)=>eK(uw,n,e);let uQ="\n    query profiles($connectionId: String!, $before: String, $after: String, $search: String, $limit: Int) {\n  connection(id: $connectionId) {\n    __typename\n    ... on Connection {\n      profiles(before: $before, after: $after, search: $search, limit: $limit) {\n        data {\n          ...Profile\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ".concat(td),uW=(n,e)=>(0,ek.useQuery)(["profiles",n],eK(uQ,n),e);uW.getKey=n=>["profiles",n],uW.fetcher=(n,e)=>eK(uQ,n,e);let uH="\n    query redirectUris($environmentId: String!, $before: String, $after: String, $limit: Int = 100) {\n  redirectUris(\n    environmentId: $environmentId\n    before: $before\n    after: $after\n    limit: $limit\n  ) {\n    data {\n      ...RedirectUri\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(ts),uJ=(n,e)=>(0,ek.useQuery)(["redirectUris",n],eK(uH,n),e);uJ.getKey=n=>["redirectUris",n],uJ.fetcher=(n,e)=>eK(uH,n,e);let uX="\n    query request($id: String!) {\n  request(id: $id) {\n    ...Request\n  }\n}\n    ".concat(tc),uj=(n,e)=>(0,ek.useQuery)(["request",n],eK(uX,n),e);uj.getKey=n=>["request",n],uj.fetcher=(n,e)=>eK(uX,n,e);let uY="\n    query requests($before: String, $after: String, $environmentId: String!, $search: String, $limit: Int) {\n  requests(\n    before: $before\n    after: $after\n    environmentId: $environmentId\n    search: $search\n    limit: $limit\n  ) {\n    data {\n      ...Request\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(tc),uZ=(n,e)=>(0,ek.useQuery)(["requests",n],eK(uY,n),e);uZ.getKey=n=>["requests",n],uZ.fetcher=(n,e)=>eK(uY,n,e);let u0="\n    query membershipCountForRole($id: ID!) {\n  membershipCountForRole(id: $id) {\n    ... on RoleNotFound {\n      roleId\n    }\n    ... on MembershipCountForRole {\n      membershipCount\n    }\n  }\n}\n    ",u2=(n,e)=>(0,ek.useQuery)(["membershipCountForRole",n],eK(u0,n),e);u2.getKey=n=>["membershipCountForRole",n],u2.fetcher=(n,e)=>eK(u0,n,e);let u5="\n    query roles($id: ID!) {\n  rolesForEnvironment(id: $id) {\n    roles {\n      ...Role\n    }\n  }\n  roleConfigForEnvironmentV2(id: $id) {\n    ...RoleConfig\n  }\n}\n    ".concat(tm,"\n").concat(tl),u9=(n,e)=>(0,ek.useQuery)(["roles",n],eK(u5,n),e);u9.getKey=n=>["roles",n],u9.fetcher=(n,e)=>eK(u5,n,e);let u3="\n    query samlSessions($connectionId: String!, $before: String, $after: String, $search: String, $state: SAMLSessionState, $limit: Int) {\n  connection(id: $connectionId) {\n    __typename\n    ... on Connection {\n      samlSessions(\n        before: $before\n        after: $after\n        search: $search\n        state: $state\n        limit: $limit\n      ) {\n        data {\n          ...ConnectionSessionData\n        }\n        listMetadata {\n          before\n          after\n        }\n      }\n    }\n  }\n}\n    ".concat(eX),u1=(n,e)=>(0,ek.useQuery)(["samlSessions",n],eK(u3,n),e);u1.getKey=n=>["samlSessions",n],u1.fetcher=(n,e)=>eK(u3,n,e);let u7="\n    query seededTestIdpConnection($environmentId: String!) {\n  environment(id: $environmentId) {\n    seededTestIdpConnection {\n      ...Connection\n      organization {\n        id\n        domains {\n          domain\n          state\n        }\n      }\n    }\n  }\n}\n    ".concat(eZ),u4=(n,e)=>(0,ek.useQuery)(["seededTestIdpConnection",n],eK(u7,n),e);u4.getKey=n=>["seededTestIdpConnection",n],u4.fetcher=(n,e)=>eK(u7,n,e);let u6="\n    query slackChannels {\n  currentTeam {\n    slackChannels {\n      ...SlackChannel\n    }\n    unassociatedSlackChannels {\n      id\n    }\n  }\n}\n    ".concat(tp),u8=(n,e)=>(0,ek.useQuery)(void 0===n?["slackChannels"]:["slackChannels",n],eK(u6,n),e);u8.getKey=n=>void 0===n?["slackChannels"]:["slackChannels",n],u8.fetcher=(n,e)=>eK(u6,n,e);let dn="\n    query stripeBillingData {\n  currentTeam {\n    stripeBillingData {\n      ...StripeBillingData\n    }\n  }\n}\n    ".concat("\n    fragment StripeBillingData on StripeBillingData {\n  billingAddress {\n    name\n    line1\n    line2\n    city\n    state\n    postalCode\n    country\n  }\n  defaultPaymentMethod {\n    brand\n    last4\n    expirationMonth\n    expirationYear\n  }\n}\n    "),de=(n,e)=>(0,ek.useQuery)(void 0===n?["stripeBillingData"]:["stripeBillingData",n],eK(dn,n),e);de.getKey=n=>void 0===n?["stripeBillingData"]:["stripeBillingData",n],de.fetcher=(n,e)=>eK(dn,n,e);let dt="\n    query teamBillingData {\n  currentTeam {\n    orbBillingData {\n      currentPeriodStart\n      currentPeriodEnd\n      planName\n      upcomingInvoice {\n        total\n        lineItems {\n          name\n          quantity\n          total\n          unitAmount\n          type\n          total\n          quantity\n          tiers {\n            from\n            to\n            name\n            total\n            name\n            quantity\n            unitAmount\n          }\n        }\n      }\n    }\n    stripeBillingData {\n      lastInvoiceSummary {\n        id\n        total\n        pdfUrl\n      }\n    }\n    billingDetails {\n      connections {\n        billableConnectionCount\n      }\n      directories {\n        billableDirectoryCount\n      }\n      auditLogs {\n        billable30DayRention\n        billable90DayRetention\n        billable365DayRetention\n        billableStreams\n      }\n    }\n    entitlements {\n      id\n      featureId\n      endedAt\n    }\n  }\n}\n    ",di=(n,e)=>(0,ek.useQuery)(void 0===n?["teamBillingData"]:["teamBillingData",n],eK(dt,n),e);di.getKey=n=>void 0===n?["teamBillingData"]:["teamBillingData",n],di.fetcher=(n,e)=>eK(dt,n,e);let dr="\n    query teamBillingInvoice($invoiceId: String!) {\n  currentTeam {\n    billingInvoice(invoiceId: $invoiceId) {\n      __typename\n      ... on DetailedBillingInvoice {\n        id\n        billingPeriodStart\n        connectionsCount\n        tax\n        totalDiscount\n        appliedBalance\n        total\n        planKey\n        pdfUrl\n        paidAt\n        paymentStatus\n        items {\n          id\n          count\n          description\n          total\n          unitPrice\n          featureKey\n        }\n      }\n      ... on InvoiceNotFound {\n        invoiceId\n      }\n      ... on LegacyBillingInvoice {\n        id\n        billingPeriodStart\n        pdfUrl\n        planKey\n        tax\n        totalDiscount\n        appliedBalance\n        total\n        paidAt\n        paymentStatus\n      }\n    }\n  }\n}\n    ",da=(n,e)=>(0,ek.useQuery)(["teamBillingInvoice",n],eK(dr,n),e);da.getKey=n=>["teamBillingInvoice",n],da.fetcher=(n,e)=>eK(dr,n,e);let du="\n    query teamBillingPaymentHistory {\n  currentTeam {\n    paymentHistory {\n      items {\n        ...BillingPaymentHistoryItem\n      }\n    }\n  }\n}\n    ".concat("\n    fragment BillingPaymentHistoryItem on BillingPaymentHistoryItem {\n  id\n  billingPeriodStart\n  additionalFeatureKeys\n  paymentStatus\n  total\n  connectionCount\n}\n    "),dd=(n,e)=>(0,ek.useQuery)(void 0===n?["teamBillingPaymentHistory"]:["teamBillingPaymentHistory",n],eK(du,n),e);dd.getKey=n=>void 0===n?["teamBillingPaymentHistory"]:["teamBillingPaymentHistory",n],dd.fetcher=(n,e)=>eK(du,n,e);let ds="\n    query teamDashboardDsync {\n  currentTeam {\n    internalDirectory {\n      ...TeamInternalDirectory\n    }\n  }\n}\n    ".concat(ty),dc=(n,e)=>(0,ek.useQuery)(void 0===n?["teamDashboardDsync"]:["teamDashboardDsync",n],eK(ds,n),e);dc.getKey=n=>void 0===n?["teamDashboardDsync"]:["teamDashboardDsync",n],dc.fetcher=(n,e)=>eK(ds,n,e);let dl="\n    query teamDashboardSso {\n  currentTeam {\n    connection {\n      ...TeamConnection\n    }\n  }\n}\n    ".concat("\n    fragment TeamConnection on Connection {\n  id\n  name\n  state\n  type\n}\n    "),dm=(n,e)=>(0,ek.useQuery)(void 0===n?["teamDashboardSso"]:["teamDashboardSso",n],eK(dl,n),e);dm.getKey=n=>void 0===n?["teamDashboardSso"]:["teamDashboardSso",n],dm.fetcher=(n,e)=>eK(dl,n,e);let dp="\n    query teamMemberships {\n  currentTeam {\n    memberships: users_teams {\n      ...TeamMembership\n    }\n  }\n}\n    ".concat(eQ),dg=(n,e)=>(0,ek.useQuery)(void 0===n?["teamMemberships"]:["teamMemberships",n],eK(dp,n),e);dg.getKey=n=>void 0===n?["teamMemberships"]:["teamMemberships",n],dg.fetcher=(n,e)=>eK(dp,n,e);let dy="\n    query userManagementOnboarding {\n  currentTeam {\n    userManagementActivated\n  }\n}\n    ",df=(n,e)=>(0,ek.useQuery)(void 0===n?["userManagementOnboarding"]:["userManagementOnboarding",n],eK(dy,n),e);df.getKey=n=>void 0===n?["userManagementOnboarding"]:["userManagementOnboarding",n],df.fetcher=(n,e)=>eK(dy,n,e);let dS="\n    query userlandIdentities($userId: ID!, $before: String, $after: String, $limit: Int) {\n  userlandUser(id: $userId) {\n    id\n    identities(before: $before, after: $after, limit: $limit) {\n      data {\n        id\n        createdAt\n        updatedAt\n        organization {\n          id\n          name\n          domains {\n            ...OrganizationDomain\n          }\n        }\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat(e9),dh=(n,e)=>(0,ek.useQuery)(["userlandIdentities",n],eK(dS,n),e);dh.getKey=n=>["userlandIdentities",n],dh.fetcher=(n,e)=>eK(dS,n,e);let d$="\n    query userlandSessions($userId: ID!, $before: String, $after: String, $limit: Int, $states: [UserlandSessionStateFilter!]) {\n  userlandUser(id: $userId) {\n    id\n    sessions(before: $before, after: $after, limit: $limit, states: $states) {\n      data {\n        ...UserlandSession\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat("\n    fragment UserlandSession on UserlandSession {\n  __typename\n  createdAt\n  id\n  ipAddress\n  updatedAt\n  userAgent\n  provider\n  impersonator {\n    id\n    email\n    firstName\n    lastName\n  }\n  impersonationReason\n  organization {\n    id\n    name\n  }\n  state {\n    __typename\n    ... on UserlandSessionIssued {\n      expiresAt\n    }\n    ... on UserlandSessionRevoked {\n      expiresAt\n      endedAt\n    }\n  }\n}\n    "),dI=(n,e)=>(0,ek.useQuery)(["userlandSessions",n],eK(d$,n),e);dI.getKey=n=>["userlandSessions",n],dI.fetcher=(n,e)=>eK(d$,n,e);let d_="\n    query userlandSettings($input: String!) {\n  environment(id: $input) {\n    userlandSettings {\n      allowSignUp\n      appHomepageUrl\n      isAuthkitEnabled\n      isAuthkitIdpInitiatedSsoEnabled\n      isEmailVerificationRequired\n      isGithubOauthEnabled\n      isGoogleOauthEnabled\n      isMagicAuthEnabled\n      isMicrosoftOauthEnabled\n      isPasswordAuthEnabled\n      isPasswordLowercaseRequired\n      isPasswordNumberRequired\n      isPasswordPwnedRequired\n      isPasswordSymbolRequired\n      isPasswordUppercaseRequired\n      isImpersonationEnabled\n      isSsoEnabled\n      mfaEnabled\n      passwordMinimumLength\n      passwordMinimumStrength\n      maxSessionTime\n      accessTokenExpiry\n      signUpUrl\n      userInvitationUrl\n    }\n  }\n}\n    ",dC=(n,e)=>(0,ek.useQuery)(["userlandSettings",n],eK(d_,n),e);dC.getKey=n=>["userlandSettings",n],dC.fetcher=(n,e)=>eK(d_,n,e);let db="\n    query userlandUserInvitesByOrg($organizationId: String!, $search: String, $limit: Int, $before: String, $after: String) {\n  organization(id: $organizationId) {\n    userlandUserInvites(\n      search: $search\n      limit: $limit\n      before: $before\n      after: $after\n    ) {\n      data {\n        ...UserlandUserInvite\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat(tf),dD=(n,e)=>(0,ek.useQuery)(["userlandUserInvitesByOrg",n],eK(db,n),e);dD.getKey=n=>["userlandUserInvitesByOrg",n],dD.fetcher=(n,e)=>eK(db,n,e);let dv="\n    query userlandUserInvites($environmentId: String!, $search: String, $before: String, $after: String, $limit: Int) {\n  userlandUserInvites(\n    environmentId: $environmentId\n    search: $search\n    before: $before\n    after: $after\n    limit: $limit\n  ) {\n    data {\n      ...UserlandUserInvite\n      organization {\n        id\n        name\n      }\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(tf),dA=(n,e)=>(0,ek.useQuery)(["userlandUserInvites",n],eK(dv,n),e);dA.getKey=n=>["userlandUserInvites",n],dA.fetcher=(n,e)=>eK(dv,n,e);let dU="\n    query userlandUserOrganizationMembership($id: String!) {\n  userlandUserOrganizationMembership(id: $id) {\n    ...UserlandUserOrganizationMembership\n  }\n}\n    ".concat(tS),dM=(n,e)=>(0,ek.useQuery)(["userlandUserOrganizationMembership",n],eK(dU,n),e);dM.getKey=n=>["userlandUserOrganizationMembership",n],dM.fetcher=(n,e)=>eK(dU,n,e);let dE="\n    query userlandUserOrganizationMembershipsByUserIds($input: UserlandUserOrganizationMembershipsByUserIdsArgs!) {\n  userlandUserOrganizationMembershipsByUserIds(input: $input) {\n    organizationMemberships {\n      ...UserlandUserOrganizationMembership\n    }\n  }\n}\n    ".concat(tS),dL=(n,e)=>(0,ek.useQuery)(["userlandUserOrganizationMembershipsByUserIds",n],eK(dE,n),e);dL.getKey=n=>["userlandUserOrganizationMembershipsByUserIds",n],dL.fetcher=(n,e)=>eK(dE,n,e);let dO="\n    query userlandUserOrganizationMemberships($userlandUserId: String!) {\n  userlandUserOrganizationMemberships(id: $userlandUserId) {\n    organizationMemberships {\n      ...UserlandUserOrganizationMembership\n    }\n  }\n}\n    ".concat(tS),dz=(n,e)=>(0,ek.useQuery)(["userlandUserOrganizationMemberships",n],eK(dO,n),e);dz.getKey=n=>["userlandUserOrganizationMemberships",n],dz.fetcher=(n,e)=>eK(dO,n,e);let dk="\n    query userlandUserWithOrganizationMembership($id: ID!, $status: [String!]) {\n  userlandUser(id: $id) {\n    __typename\n    id\n    createdAt\n    email\n    firstName\n    lastName\n    directoryUser {\n      id\n    }\n    sessionCount\n    lastSignedInAt\n    hasPassword\n    emailVerifiedAt\n    profilePictureUrl\n    authenticationFactors {\n      id\n      type\n    }\n    githubOauthProfile {\n      id\n    }\n    googleOauthProfile {\n      id\n    }\n    microsoftOauthProfile {\n      id\n    }\n    ssoProfile {\n      __typename\n      connection {\n        type\n      }\n    }\n    identities(status: $status) {\n      data {\n        id\n        type\n        status\n        organizationId\n        userlandUserId\n        directoryUserId\n        role {\n          id\n          name\n        }\n        createdAt\n        updatedAt\n        organization {\n          id\n          name\n          domains {\n            ...OrganizationDomain\n          }\n        }\n      }\n    }\n  }\n}\n    ".concat(e9),dR=(n,e)=>(0,ek.useQuery)(["userlandUserWithOrganizationMembership",n],eK(dk,n),e);dR.getKey=n=>["userlandUserWithOrganizationMembership",n],dR.fetcher=(n,e)=>eK(dk,n,e);let dP="\n    query userlandUser($id: ID!) {\n  userlandUser(id: $id) {\n    ...UserlandUser\n  }\n}\n    ".concat(th),dT=(n,e)=>(0,ek.useQuery)(["userlandUser",n],eK(dP,n),e);dT.getKey=n=>["userlandUser",n],dT.fetcher=(n,e)=>eK(dP,n,e);let dF="\n    query userlandUsersByOrg($organizationId: String!, $type: UserlandUserType, $search: String, $limit: Int, $before: String, $after: String) {\n  organization(id: $organizationId) {\n    userlandUsers(\n      type: $type\n      search: $search\n      limit: $limit\n      before: $before\n      after: $after\n    ) {\n      data {\n        ...UserlandUser\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ".concat(th),dN=(n,e)=>(0,ek.useQuery)(["userlandUsersByOrg",n],eK(dF,n),e);dN.getKey=n=>["userlandUsersByOrg",n],dN.fetcher=(n,e)=>eK(dF,n,e);let dK="\n    query userlandUsers($environmentId: String!, $type: UserlandUserType, $search: String, $before: String, $after: String, $limit: Int) {\n  userlandUsers(\n    environmentId: $environmentId\n    type: $type\n    search: $search\n    before: $before\n    after: $after\n    limit: $limit\n  ) {\n    data {\n      ...UserlandUser\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ".concat(th),dV=(n,e)=>(0,ek.useQuery)(["userlandUsers",n],eK(dK,n),e);dV.getKey=n=>["userlandUsers",n],dV.fetcher=(n,e)=>eK(dK,n,e);let dq="\n    query webhookEndpoint($id: String!) {\n  webhookEndpoint(id: $id) {\n    ...WebhookEndpoint\n  }\n}\n    ".concat("\n    fragment WebhookEndpoint on WebhookEndpoint {\n  id\n  endpointUrl\n  events\n  secret\n  state\n  statistics {\n    aggregatePeriodDays\n    deliveredCount\n    failedCount\n    inProgressCount\n    scheduledCount\n    totalCount\n    deliveryRate\n  }\n}\n    "),dG=(n,e)=>(0,ek.useQuery)(["webhookEndpoint",n],eK(dq,n),e);dG.getKey=n=>["webhookEndpoint",n],dG.fetcher=(n,e)=>eK(dq,n,e);let dB="\n    query webhookEndpoints($environmentId: String!, $before: String, $after: String, $limit: Int) {\n  webhookEndpoints(\n    environmentId: $environmentId\n    before: $before\n    after: $after\n    limit: $limit\n  ) {\n    data {\n      id\n      endpointUrl\n      events\n      state\n      createdAt\n      statistics {\n        deliveryRate\n      }\n    }\n    listMetadata {\n      before\n      after\n    }\n  }\n}\n    ",dw=(n,e)=>(0,ek.useQuery)(["webhookEndpoints",n],eK(dB,n),e);dw.getKey=n=>["webhookEndpoints",n],dw.fetcher=(n,e)=>eK(dB,n,e);let dx="\n    query webhookEventsWithFixtures {\n  webhookEvents {\n    ...WebhookEventWithFixture\n  }\n}\n    ".concat("\n    fragment WebhookEventWithFixture on WebhookEvent {\n  id\n  description\n  fixtures {\n    name\n    payload\n  }\n}\n    "),dQ=(n,e)=>(0,ek.useQuery)(void 0===n?["webhookEventsWithFixtures"]:["webhookEventsWithFixtures",n],eK(dx,n),e);dQ.getKey=n=>void 0===n?["webhookEventsWithFixtures"]:["webhookEventsWithFixtures",n],dQ.fetcher=(n,e)=>eK(dx,n,e);let dW="\n    query webhookEvents {\n  webhookEvents {\n    id\n    category\n  }\n}\n    ",dH=(n,e)=>(0,ek.useQuery)(void 0===n?["webhookEvents"]:["webhookEvents",n],eK(dW,n),e);dH.getKey=n=>void 0===n?["webhookEvents"]:["webhookEvents",n],dH.fetcher=(n,e)=>eK(dW,n,e);let dJ="\n    query webhook($webhookId: String!) {\n  webhook(id: $webhookId) {\n    id\n    event\n    state\n    attempt\n    deliverAfter\n    metadata\n    requestBody\n    responseBody\n    responseStatusCode\n  }\n}\n    ",dX=(n,e)=>(0,ek.useQuery)(["webhook",n],eK(dJ,n),e);dX.getKey=n=>["webhook",n],dX.fetcher=(n,e)=>eK(dJ,n,e);let dj="\n    query webhooksForEndpoint($webhookEndpointId: String!, $before: String, $after: String, $limit: Int, $search: String, $state: WebhookState, $events: [String!]) {\n  webhookEndpoint(id: $webhookEndpointId) {\n    webhooks(\n      before: $before\n      after: $after\n      limit: $limit\n      search: $search\n      state: $state\n      events: $events\n    ) {\n      data {\n        id\n        event\n        state\n        attempt\n        deliverAfter\n      }\n      listMetadata {\n        before\n        after\n      }\n    }\n  }\n}\n    ",dY=(n,e)=>(0,ek.useQuery)(["webhooksForEndpoint",n],eK(dj,n),e);dY.getKey=n=>["webhooksForEndpoint",n],dY.fetcher=(n,e)=>eK(dj,n,e)},27084:function(n,e,t){t.d(e,{T:function(){return i}});let i="https://api.workos.com"}}]);